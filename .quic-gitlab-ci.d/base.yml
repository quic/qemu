image: $CI_REGISTRY/qqvp/containers/qqvp-dev:latest

# TODO
# - Cache builds to avoid re-building same commit

###################################################################
#    Configs
###################################################################

variables:
  COMMON_CONFIG_OPTS: --enable-lto --disable-capstone --disable-guest-agent --enable-plugins --assert-target-compiler
  HEX_CONFIG_OPTS: --disable-fdt --disable-tools --disable-slirp --disable-sdl --disable-vnc --disable-gtk --disable-install-blobs
  AARCH64_CONFIG_OPTS: --enable-fdt --enable-slirp --disable-debug-info --disable-debug-tcg --enable-virtfs --enable-avx2 --enable-avx512f --disable-png --disable-sanitizers

  GENERIC_CONFIG_CMD: installdir="$(realpath "$(mktemp -d -p .)")" && ../configure --prefix="$$installdir" $COMMON_CONFIG_OPTS
  HEX_CONFIG_CMD: $GENERIC_CONFIG_CMD $HEX_CONFIG_OPTS --target-list=hexagon-softmmu,hexagon-linux-user
  AARCH64_CONFIG_CMD: $GENERIC_CONFIG_CMD $AARCH64_CONFIG_OPTS --target-list=aarch64-softmmu,aarch64-linux-user

  QQVP_PROJECT_URL: gitlab.qualcomm.com/qqvp

###################################################################
#    Base templates
###################################################################

.base-build:
  variables: {BUILDDIR: $CI_JOB_NAME}
  script:
    mkdir $BUILDDIR &&
    cd $BUILDDIR &&
    echo "Configuring with '$CONFIG_CMD'" &&
    eval $CONFIG_CMD &&
    make -j
  artifacts:
    paths: [ $BUILDDIR ]

.base-install:
  script:
    builddir="$(echo $CI_JOB_NAME | cut -d_ -f1)_build" &&
    cd $builddir &&
    make install

.base-check-tcg:
  script:
    builddir="$(echo $CI_JOB_NAME | cut -d_ -f1)_build" &&
    cd $builddir &&
    make check-tcg V=1 LSAN_OPTIONS=detect_leaks=0

.base-check:
  script:
    builddir="$(echo $CI_JOB_NAME | cut -d_ -f1)_build" &&
    cd $builddir &&
    make check

##################################################################
#    Jobs
###################################################################

checkpatch:
  variables:
    REMOTE_URL: https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/qemu/qemu.git
    AUTH: "PRIVATE-TOKEN: $CI_API_TOKEN"
    QEMU_PROJ_ID: 3968
    MR_API_URL: "https://gitlab.qualcomm.com/api/v4/projects/$QEMU_PROJ_ID/merge_requests?source_branch=$CI_COMMIT_REF_NAME"
  allow_failure: true
  # Note: we try set-url first because gitlab runners will preserve the repo
  # configs in between builds, so `remote add` would fail.
  script:
    - git remote set-url mainrepo $REMOTE_URL >/dev/null 2>&1 || git remote add mainrepo $REMOTE_URL
    - sleep 4 # Wait a bit after MR creation so that GitLab-API doesn't miss it
    - echo 'Querying "$MR_API_URL"'
    - reply="$(curl -LsS -H "$AUTH" "$MR_API_URL")"
    - target_branch=$(printf "%s" "$reply" | tr -d "[:space:]" | sed -ne 's/.*"target_branch":"\([^"]*\)".*/\1/p')
    - if test -n "$target_branch"; then
        echo "Found target branch '$target_branch'";
        git fetch mainrepo $target_branch || exit 1;
        error=0;
        for rev in $(git rev-list --first-parent FETCH_HEAD..HEAD); do
          echo "========= Checking commit $(git log --pretty=reference $rev^!)";
          ./scripts/checkpatch.pl --no-signoff --branch "$rev^!";
          error=$(($error || $?));
        done;
        if test $? -ne 0 || test $error -ne 0; then
          exit 1;
        fi;
      else
        echo "DIDN'T FIND TARGET BRANCH";
        printf "API reply is '%s'\n" "$reply";
      fi

hexagon_build:
  extends: .base-build
  variables: { CONFIG_CMD: $HEX_CONFIG_CMD }
hexagon_install:
  needs: [hexagon_build]
  extends: .base-install
hexagon_check-tcg:
  needs: [hexagon_build]
  extends: .base-check-tcg
hexagon_check:
  needs: [hexagon_build]
  extends: .base-check

san-hexagon_build:
  extends: .base-build
  variables: { CONFIG_CMD: "$HEX_CONFIG_CMD --enable-sanitizers" }
san-hexagon_install:
  needs: [san-hexagon_build]
  extends: .base-install
san-hexagon_check-tcg:
  needs: [san-hexagon_build]
  extends: .base-check-tcg
san-hexagon_check:
  needs: [san-hexagon_build]
  extends: .base-check

no-idef-parser-hexagon_build:
  extends: .base-build
  variables: { CONFIG_CMD: "$HEX_CONFIG_CMD --disable-hexagon-idef-parser" }
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
no-idef-parser-hexagon_install:
  needs: [no-idef-parser-hexagon_build]
  extends: .base-install
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
no-idef-parser-hexagon_check-tcg:
  needs: [no-idef-parser-hexagon_build]
  extends: .base-check-tcg
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
no-idef-parser-hexagon_check:
  needs: [no-idef-parser-hexagon_build]
  extends: .base-check
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"

aarch64_build:
  extends: .base-build
  variables: { CONFIG_CMD: $AARCH64_CONFIG_CMD }
aarch64_install:
  needs: [aarch64_build]
  extends: .base-install
aarch64_check-tcg:
  needs: [aarch64_build]
  extends: .base-check-tcg
aarch64_check:
  needs: [aarch64_build]
  extends: .base-check

test_hexagon_perf:
  needs: [hexagon_build]
  tags:
    - performance-hardware
  # We'll execute a smaller subset of tests, fewer iters for routine
  # commits/MRs.  In a nightly build we can run a comprehensive test.
  before_script:
    -   PERF_TEST_CFG="${PWD}/qemu-hexagon-perf/minimal_test_config.py" ;
        PERF_TEST_CFG_MTTCG="${PWD}/.quic-gitlab-ci.d/mttcg_test_config.py" ;
        PERF_TEST_ITERS="3" ;
        if [[ "${CI_PIPELINE_SOURCE}" == "schedule" ]] || [[ "${CI_PIPELINE_SOURCE}" == "web" ]]; then
            PERF_TEST_CFG="${PWD}/qemu-hexagon-perf/default_test_config.py" ;
            PERF_TEST_ITERS="6";
        fi
  script:
    - echo test for perf - if this fails, check qqvp-dev kernel ver and perf host sysctl ;
      perf stat /bin/true
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/qemu/qemu-hexagon-perf.git
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/qemu/qemu-hexagon-benchmarks.git
    - res=0 ;
      for mode in default mttcg; do
          cfg=${PERF_TEST_CFG} ;
          if test $mode = mttcg; then
              sys_args='-accel tcg,thread=multi' ;
              cfg=${PERF_TEST_CFG_MTTCG} ;
          fi ;
          ./qemu-hexagon-perf/customer_test_suite.py
              --bench-dir ./qemu-hexagon-benchmarks/
              --qemu-user-bin-dir ${PWD}/hexagon_build/
              --qemu-bin-dir ${PWD}/hexagon_build/
              --output-file ./perf-results-$mode.json
              --test-cfg ${cfg}
              --iters ${PERF_TEST_ITERS}
              --inspector perf-stat
              --sys-args="$sys_args" ;
          res=$(( ${res} + ${?})) ;
      done ;
      exit ${res}
  artifacts:
    when: always
    paths: [ "perf-results-default.json", "perf-results-mttcg.json" ]
