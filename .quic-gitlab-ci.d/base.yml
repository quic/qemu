include:
  - project: 'qqvp/cmake-boilerplate'
    file: 'base.yml'

# TODO
# - Cache builds to avoid re-building same commit

###################################################################
#    Configs
###################################################################

variables:
  QEMU_CONFIGURABLE_FEATURES_OPTS: >-
    --enable-vhost-kernel --enable-vhost-net --enable-vhost-user
    --enable-vhost-crypto --enable-vhost-user-blk-server --enable-vhost-vdpa

  QEMU_COMPILATION_OPTS: --enable-malloc-trim --enable-avx2 --enable-avx512f
  QEMU_TARGETS_AND_ACCELERATORS_OPTS: --enable-plugins --enable-multiprocess
  QEMU_BLOCK_LAYER_SUPPORT_OPTS: >-
    --enable-coroutine-pool --enable-virtfs --enable-live-block-migration
    --enable-replication --enable-bochs --enable-cloop --enable-dmg
    --enable-qcow1 --enable-vdi --enable-vvfat --enable-qed --enable-parallels
    --enable-vduse-blk-export --enable-libvduse

  QEMU_CRYPTO_OPTS: --enable-keyring
  QEMU_USER_INTERFACE_OPTS: --enable-png
  QEMU_AUDIO_OPTS: --enable-oss --enable-pa --enable-alsa
  QEMU_NETWORK_BACKENDS_OPTS: --enable-l2tpv3
  QEMU_DEPENDENCIES_OPTS: >-
    --enable-iconv --enable-virglrenderer --enable-attr --enable-cap-ng
    --enable-opengl --enable-tpm --enable-libudev

  DEFAULT_CONFIG_OPTS: >-
    --without-default-features --assert-target-compiler
    $QEMU_CONFIGURABLE_FEATURES_OPTS $QEMU_COMPILATION_OPTS
    $QEMU_TARGETS_AND_ACCELERATORS_OPTS $QEMU_BLOCK_LAYER_SUPPORT_OPTS
    $QEMU_CRYPTO_OPTS $QEMU_USER_INTERFACE_OPTS $QEMU_AUDIO_OPTS
    $QEMU_NETWORK_BACKENDS_OPTS $QEMU_DEPENDENCIES_OPTS

  # Can be used for overriding DEFAULT_CONFIG_OPTS with options specific to
  # Hexagon
  HEX_CONFIG_OPTS: >-
    --extra-ldflags=-lrt

  HEX_CONFIG_OPTS_MAC: >-

  HEX_CONFIG_OPTS_WIN: >-
    --qemu-testing-path="wine $$installdir/qemu-system-hexagon.exe"

  # Can be used for overriding DEFAULT_CONFIG_OPTS with options specific to
  # AArch64
  AARCH64_CONFIG_OPTS: >-
    --enable-fdt --enable-slirp --enable-sdl --enable-gtk --enable-pixman
    --enable-install-blobs --disable-png --disable-debug-info
    --disable-debug-tcg --gdb=aarch64-linux-gnu-gdb

  GENERIC_CONFIG_CMD: ../configure --prefix="$$installdir" --disable-install-blobs
  HEX_CONFIG_CMD: $GENERIC_CONFIG_CMD $DEFAULT_CONFIG_OPTS $HEX_CONFIG_OPTS --target-list=hexagon-softmmu,hexagon-linux-user
  AARCH64_CONFIG_CMD: $GENERIC_CONFIG_CMD $DEFAULT_CONFIG_OPTS $AARCH64_CONFIG_OPTS --target-list=aarch64-softmmu,aarch64-linux-user
  HEX_MAC_CONFIG_CMD: $GENERIC_CONFIG_CMD $HEX_CONFIG_OPTS_MAC --disable-strip --disable-pie --disable-virglrenderer --disable-opengl --target-list=hexagon-softmmu
  HEX_WIN_CONFIG_CMD: $GENERIC_CONFIG_CMD $HEX_CONFIG_OPTS_WIN --without-default-features --assert-target-compiler --cross-prefix=x86_64-w64-mingw32- --target-list=hexagon-softmmu

  GITLAB_URL: echo "$CI_SERVER_URL" | sed -e 's/^.*:\/\///g' -e 's/:[0-9]*$//g'

  HEX_COPROC_PROJ: qemu/quic-qemu-plugins
  HEX_COPROC_BIN: coproc_rpc_remote
  HEX_COPROC_SHA: e7e7ace69fdd4213293c47212ed4507027f761db

  TARBALLS_PATH: tarball-artifacts

###################################################################
#    Base templates
###################################################################
coproc_build:
  script:
    - QQVP_PROJECT_URL="$(eval "$GITLAB_URL")/$CI_PROJECT_ROOT_NAMESPACE"
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/${HEX_COPROC_PROJ}.git
    - repo=$(basename $HEX_COPROC_PROJ)
    - git -C $repo checkout $HEX_COPROC_SHA
    - make -C $repo/hexagon/coprocs -j
    - mv $repo/hexagon/coprocs/$HEX_COPROC_BIN ./
  artifacts:
    paths: [ $HEX_COPROC_BIN ]

.base-build:
  variables: {BUILDDIR: $CI_JOB_NAME}
  script:
    - |
      mkdir $BUILDDIR
      installdir_rel="$(echo $CI_JOB_NAME | cut -d_ -f1)_install"
      installdir="$(realpath "$installdir_rel")"
      cd $BUILDDIR
      echo "Configuring with '$CONFIG_CMD'"
      eval $CONFIG_CMD
      make -j
  artifacts:
    paths: [ $BUILDDIR ]
    expire_in: 1 day

# This is for jobs that execute after (and, in fact, depend upon) a build
# job. Gitlab might update the files tracked by git in between dependent jobs,
# and that would cause the source timestamp to be newer than the artifacts',
# causing an unnecessary and time-consuming rebuild. To avoid that, we touch all
# build files (which should be quite fast; <1s in my machine).
.after-build:
  before_script:
    - builddir="$(echo $CI_JOB_NAME | cut -d_ -f1)_build"
    - sleep 1 # Give a small time difference for touch below
    - find $builddir -type f,d -exec touch {} +

.base-install:
  extends: .after-build
  script: make -C $builddir -j install
  artifacts:
    paths: [ $CI_JOB_NAME ]
    expire_in: 1 day

.base-check-tcg:
  extends: .after-build
  script:
    - make -C $builddir -j check-tcg V=1 OVERRIDE_OPTS="$OVERRIDE_OPTS"
  artifacts:
    when: on_failure
    paths: [ "*_build" ]
    expire_in: 4 days

.base-check:
  extends: .after-build
  script:
    - $builddir/pyvenv/bin/meson test -C $builddir --no-rebuild
  artifacts:
    when: on_failure
    paths: [ "*_build" ]
    expire_in: 4 days

.base-qurt-tests:
  extends: .after-build
  script:
    - QQVP_PROJECT_URL="$(eval "$GITLAB_URL")/$CI_PROJECT_ROOT_NAMESPACE"
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/testing/qemu-qurt-tests.git
    - qemu-qurt-tests/run_tests.sh $builddir/qemu-system-hexagon nspv68
    - qemu-qurt-tests/run_tests.sh $builddir/qemu-system-hexagon nspv79NA_1

.base-sival-tests:
  extends: .after-build
  script:
    - QQVP_PROJECT_URL="$(eval "$GITLAB_URL")/$CI_PROJECT_ROOT_NAMESPACE"
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/testing/qemu-sival-tests.git
    - qemu-sival-tests/run_tests.sh $builddir/qemu-system-hexagon

# The idea behind this job template is to simulate the default install
# structure from qpm, allowing future jobs that execute qemu-system-hexagon to
# have it find the coproc through its default path logic.
#
# It must NOT be extended directly, but rather referenced through the
# "!reference" keyword.
.hex-and-coproc:
  script:
    - |
      if test -z "${BUILDDIR}"; then
        echo "BUG - .hex-and-coproc requires BUILDDIR to be defined"
        exit 1
      fi
      mkdir -p ${BUILDDIR}/Tools/QEMUHexagon/bin
      mkdir -p ${BUILDDIR}/Tools/QEMUCoprocPlugin
      mv $HEX_COPROC_BIN ${BUILDDIR}/Tools/QEMUCoprocPlugin/
      mv ${BUILDDIR}/qemu-system-hexagon ${BUILDDIR}/Tools/QEMUHexagon/bin
      ln -s $(realpath ${BUILDDIR}/Tools/QEMUHexagon/bin/qemu-system-hexagon) ${BUILDDIR}/

.base-trigger:
  trigger:
    strategy: depend
  allow_failure: true
  inherit:
    variables: false
  variables:
    OVERRIDE_PKG: libqemu
    OVERRIDE_REF: $CI_COMMIT_REF_NAME
    # Workaround for CI_REPOSITORY_URL not being exported:
    # https://gitlab.com/gitlab-org/gitlab/-/issues/231663
    OVERRIDE_URL: "${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"

##################################################################
#    Jobs
###################################################################

checkpatch:
  extends: .mr-job
  stage: test
  script: .quic-gitlab-ci.d/checkpatch.sh $TARGET_REF $SOURCE_REF
  allow_failure: true

hexagon_build_ug:
  script:
    - make -C quic/user_guide/ html latexpdf
  artifacts:
    paths: [ quic/user_guide/_build/html, quic/user_guide/_build/latex ]
    expire_in: 2 days

hexagon_build:
  extends: .base-build
  variables: { CONFIG_CMD: $HEX_CONFIG_CMD }
hexagon_and_coproc_build:
  needs: [hexagon_build, coproc_build]
  variables: { BUILDDIR: hexagon_build }
  script: !reference [.hex-and-coproc, script]
  artifacts:
    paths: [ $BUILDDIR ]
    expire_in: 1 day
hexagon_install:
  needs: [hexagon_build]
  extends: .base-install
hexagon_check-tcg:
  needs: [hexagon_and_coproc_build]
  extends: .base-check-tcg
hexagon_check-tcg-MTTCG:
  needs: [hexagon_and_coproc_build]
  extends: .base-check-tcg
  variables: { OVERRIDE_OPTS: "-accel tcg,thread=multi" }
hexagon_check:
  needs: [hexagon_and_coproc_build]
  extends: .base-check
hexagon_qurt-tests:
  extends: .base-qurt-tests
  needs: [hexagon_and_coproc_build]
hexagon_sival-tests:
  extends: .base-sival-tests
  needs: [hexagon_and_coproc_build]

hexagon-win_build:
  image: $CI_REGISTRY/qqvp/containers/qqvp-dev-win:latest
  extends: .base-build
  variables: { CONFIG_CMD: $HEX_WIN_CONFIG_CMD }
hexagon-win_install:
  image: $CI_REGISTRY/qqvp/containers/qqvp-dev-win:latest
  needs: [hexagon-win_build]
  extends: .base-install
hexagon-win_check-tcg:
  image: $CI_REGISTRY/qqvp/containers/qqvp-dev-win:latest
  # We need install dir due to a bug that prevents running qemu from
  # the build dir in this mingw64/wine setup.
  needs: [hexagon-win_build, hexagon-win_install]
  extends: .base-check-tcg

hexagon-mac_build:
  tags:
    - mac
  extends: .base-build
  variables: { CONFIG_CMD: $HEX_MAC_CONFIG_CMD }

san-hexagon_build:
  extends: .base-build
  variables: { CONFIG_CMD: "$HEX_CONFIG_CMD --enable-sanitizers" }
san-hexagon_and_coproc_build:
  needs: [san-hexagon_build, coproc_build]
  variables: { BUILDDIR: san-hexagon_build }
  script: !reference [.hex-and-coproc, script]
  artifacts:
    paths: [ $BUILDDIR ]
    expire_in: 1 day
san-hexagon_install:
  needs: [san-hexagon_build]
  extends: .base-install
san-hexagon_check-tcg:
  needs: [san-hexagon_and_coproc_build]
  extends: .base-check-tcg
san-hexagon_check:
  needs: [san-hexagon_and_coproc_build]
  extends: .base-check
san-hexagon_qurt-tests:
  extends: .base-qurt-tests
  needs: [san-hexagon_and_coproc_build]
san-hexagon_sival-tests:
  extends: .base-sival-tests
  needs: [san-hexagon_and_coproc_build]

no-idef-parser-hexagon_build:
  extends: .base-build
  variables: { CONFIG_CMD: "$HEX_CONFIG_CMD --disable-hexagon-idef-parser" }
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
no-idef-parser-hexagon_and_coproc_build:
  needs: [no-idef-parser-hexagon_build, coproc_build]
  variables: { BUILDDIR: no-idef-parser-hexagon_build }
  script: !reference [.hex-and-coproc, script]
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  artifacts:
    paths: [ $BUILDDIR ]
    expire_in: 1 day
no-idef-parser-hexagon_install:
  needs: [no-idef-parser-hexagon_build]
  extends: .base-install
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
no-idef-parser-hexagon_check-tcg:
  needs: [no-idef-parser-hexagon_and_coproc_build]
  extends: .base-check-tcg
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
no-idef-parser-hexagon_check:
  needs: [no-idef-parser-hexagon_and_coproc_build]
  extends: .base-check
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"

aarch64_build:
  extends: .base-build
  variables: { CONFIG_CMD: $AARCH64_CONFIG_CMD }
aarch64_install:
  needs: [aarch64_build]
  extends: .base-install
aarch64_check-tcg:
  needs: [aarch64_build]
  extends: .base-check-tcg
aarch64_check:
  needs: [aarch64_build]
  extends: .base-check

test_hexagon_perf:
  extends: .after-build
  needs: [hexagon_and_coproc_build]
  tags:
     - performance-hardware
  # We'll execute a smaller subset of tests, fewer iters for routine
  # commits/MRs.  In a nightly build we can run a comprehensive test.
  before_script:
    -   PERF_TEST_CFG="${PWD}/.quic-gitlab-ci.d/minimal_test_config.py" ;
        PERF_TEST_CFG_MTTCG="${PWD}/.quic-gitlab-ci.d/mttcg_min_test_config.py" ;
        PERF_TEST_ITERS="3" ;
        if [[ "${CI_PIPELINE_SOURCE}" == "schedule" ]] || [[ "${CI_PIPELINE_SOURCE}" == "web" ]]; then
            PERF_TEST_CFG="${PWD}/.quic-gitlab-ci.d/default_test_config.py" ;
            PERF_TEST_CFG_MTTCG="${PWD}/.quic-gitlab-ci.d/mttcg_full_test_config.py" ;
            PERF_TEST_ITERS="6";
        fi
  script:
    - echo test for perf - if this fails, check qqvp-dev kernel ver and perf host sysctl ;
      perf stat /bin/true
    - QQVP_PROJECT_URL="$(eval "$GITLAB_URL")/$CI_PROJECT_ROOT_NAMESPACE"
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/testing/qemu-hexagon-perf.git
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/testing/qemu-hexagon-benchmarks.git
    - res=0 ;
      for mode in default mttcg; do
          cfg=${PERF_TEST_CFG} ;
          if test $mode = mttcg; then
              sys_args='-accel tcg,thread=multi' ;
              cfg=${PERF_TEST_CFG_MTTCG} ;
          fi ;
          ./qemu-hexagon-perf/customer_test_suite.py
              --bench-dir ./qemu-hexagon-benchmarks/
              --qemu-user-bin-dir ${PWD}/hexagon_build/
              --qemu-bin-dir ${PWD}/hexagon_build/
              --output-file ./perf-results-$mode.json
              --test-cfg ${cfg}
              --iters ${PERF_TEST_ITERS}
              --inspector perf-stat
              --sys-args="$sys_args" ;
          res=$(( ${res} + ${?})) ;
      done ;
      exit ${res}
  artifacts:
    when: always
    paths: [ "perf-results-default.json", "perf-results-mttcg.json" ]
    expire_in: 4 days

test_hexagon_perf_ml:
  extends: .after-build
  needs: [hexagon_and_coproc_build]
  tags:
     - performance-hardware
  # We'll execute a smaller subset of tests, fewer iters for routine
  # commits/MRs.  In a nightly build we can run a comprehensive test.
  before_script:
    -   PERF_TEST_CFG="${PWD}/.quic-gitlab-ci.d/hex_nn_v3.py" ;
        PERF_TEST_ITERS="1" ;
        if [[ "${CI_PIPELINE_SOURCE}" == "schedule" ]] || [[ "${CI_PIPELINE_SOURCE}" == "web" ]]; then
            PERF_TEST_ITERS="3";
        fi
  script:
    - echo test for perf - if this fails, check qqvp-dev kernel ver and perf host sysctl ;
      perf stat /bin/true
    - QQVP_PROJECT_URL="$(eval "$GITLAB_URL")/$CI_PROJECT_ROOT_NAMESPACE"
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/testing/qemu-hexagon-perf.git
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/testing/qemu-hexagon-benchmarks.git
    - ./qemu-hexagon-perf/customer_test_suite.py
          --bench-dir ./qemu-hexagon-benchmarks/
          --qemu-user-bin-dir ${PWD}/hexagon_build/
          --qemu-bin-dir ${PWD}/hexagon_build/
          --output-file ./perf-results-hex_nn.json
          --test-cfg ${PERF_TEST_CFG}
          --iters ${PERF_TEST_ITERS}
          --inspector none
          --sys-args="-accel tcg,thread=multi"
  artifacts:
    when: always
    paths: [ "perf-results-hex_nn.json",  ]
    expire_in: 7 days
  rules:
    - if: $CI_COMMIT_TAG
      when: always
#   QTOOL-111617: nightlies disabled for now
#   - if: $CI_PIPELINE_SOURCE == "schedule"
#     when: always
    - when: manual
      allow_failure: true

qqvp_trigger:
  extends: .base-trigger
  trigger:
    project: qqvp/qqvp

qbox_trigger:
  extends: .base-trigger
  trigger:
    project: qqvp/qbox
