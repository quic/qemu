include:
  - project: 'qqvp/cmake-boilerplate'
    file: 'base.yml'

# TODO
# - Cache builds to avoid re-building same commit

###################################################################
#    Configs
###################################################################

variables:
  QEMU_CONFIGURABLE_FEATURES_OPTS: >-
    --enable-vhost-kernel --enable-vhost-net --enable-vhost-user
    --enable-vhost-crypto --enable-vhost-user-blk-server --enable-vhost-vdpa

  QEMU_COMPILATION_OPTS: --enable-malloc-trim --enable-avx2 --enable-avx512f
  QEMU_TARGETS_AND_ACCELERATORS_OPTS: --enable-plugins --enable-multiprocess
  QEMU_BLOCK_LAYER_SUPPORT_OPTS: >-
    --enable-coroutine-pool --enable-virtfs --enable-live-block-migration
    --enable-replication --enable-bochs --enable-cloop --enable-dmg
    --enable-qcow1 --enable-vdi --enable-vvfat --enable-qed --enable-parallels
    --enable-vduse-blk-export --enable-libvduse

  QEMU_CRYPTO_OPTS: --enable-keyring
  QEMU_USER_INTERFACE_OPTS: --enable-png
  QEMU_AUDIO_OPTS: --enable-oss --enable-pa --enable-alsa
  QEMU_NETWORK_BACKENDS_OPTS: --enable-l2tpv3
  QEMU_DEPENDENCIES_OPTS: >-
    --enable-iconv --enable-virglrenderer --enable-attr --enable-cap-ng
    --enable-opengl --enable-tpm --enable-libudev

  DEFAULT_CONFIG_OPTS: >-
    --without-default-features --disable-install-blobs --assert-target-compiler
    $QEMU_CONFIGURABLE_FEATURES_OPTS $QEMU_COMPILATION_OPTS
    $QEMU_TARGETS_AND_ACCELERATORS_OPTS $QEMU_BLOCK_LAYER_SUPPORT_OPTS
    $QEMU_CRYPTO_OPTS $QEMU_USER_INTERFACE_OPTS $QEMU_AUDIO_OPTS
    $QEMU_NETWORK_BACKENDS_OPTS $QEMU_DEPENDENCIES_OPTS

  # Can be used for overriding DEFAULT_CONFIG_OPTS with options specific to
  # Hexagon
  HEX_CONFIG_OPTS: >-

  # Can be used for overriding DEFAULT_CONFIG_OPTS with options specific to
  # AArch64
  AARCH64_CONFIG_OPTS: >-
    --enable-fdt --enable-slirp --enable-sdl --enable-gtk
    --enable-install-blobs --disable-png --disable-debug-info
    --disable-debug-tcg --gdb=aarch64-linux-gnu-gdb

  GENERIC_CONFIG_CMD: ../configure --prefix="$$installdir"
  HEX_CONFIG_CMD: $GENERIC_CONFIG_CMD $DEFAULT_CONFIG_OPTS $HEX_CONFIG_OPTS --target-list=hexagon-softmmu,hexagon-linux-user
  AARCH64_CONFIG_CMD: $GENERIC_CONFIG_CMD $DEFAULT_CONFIG_OPTS $AARCH64_CONFIG_OPTS --target-list=aarch64-softmmu,aarch64-linux-user
  HEX_MAC_CONFIG_CMD: $GENERIC_CONFIG_CMD $HEX_CONFIG_OPTS --disable-strip --disable-pie --disable-virglrenderer --disable-opengl --target-list=hexagon-softmmu
  HEX_WIN_CONFIG_CMD: $GENERIC_CONFIG_CMD $HEX_CONFIG_OPTS --without-default-features --cross-prefix=x86_64-w64-mingw32- --target-list=hexagon-softmmu

  GITLAB_URL: echo "$CI_SERVER_URL" | sed -e 's/^.*:\/\///g' -e 's/:[0-9]*$//g'

  HEX_COPROC_PROJ: qemu/quic-qemu-plugins
  HEX_COPROC_BIN: coproc_rpc_remote
  HEX_COPROC_SHA: bba8fe40ed31d090da02bad2330e1e350902ff2a

  TARBALLS_PATH: tarball-artifacts

###################################################################
#    Base templates
###################################################################
coproc_build:
  script:
    - QQVP_PROJECT_URL="$(eval "$GITLAB_URL")/$CI_PROJECT_ROOT_NAMESPACE"
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/${HEX_COPROC_PROJ}.git
    - repo=$(basename $HEX_COPROC_PROJ)
    - git -C $repo checkout $HEX_COPROC_SHA
    - make -C $repo/hexagon/coprocs -j
    - mv $repo/hexagon/coprocs/$HEX_COPROC_BIN ./
  artifacts:
    paths: [ $HEX_COPROC_BIN ]

.base-build:
  variables: {BUILDDIR: $CI_JOB_NAME}
  script:
    - |
      mkdir $BUILDDIR
      installdir_rel="$(echo $CI_JOB_NAME | cut -d_ -f1)_install"
      installdir="$(realpath "$installdir_rel")"
      cd $BUILDDIR
      echo "Configuring with '$CONFIG_CMD'"
      eval $CONFIG_CMD
      make -j
  artifacts:
    paths: [ $BUILDDIR ]
    expire_in: 1 day

# This is for jobs that execute after (and, in fact, depend upon) a build
# job. Gitlab might update the files tracked by git in between dependent jobs,
# and that would cause the source timestamp to be newer than the artifacts',
# causing an unnecessary and time-consuming rebuild. To avoid that, we touch all
# build files (which should be quite fast; <1s in my machine).
.after-build:
  before_script:
    - builddir="$(echo $CI_JOB_NAME | cut -d_ -f1)_build"
    - sleep 1 # Give a small time difference for touch below
    - find $builddir -type f,d -exec touch {} +

.base-install:
  extends: .after-build
  script: make -C $builddir -j install
  artifacts:
    paths: [ $CI_JOB_NAME ]
    expire_in: 1 day

.base-tarball:
  variables:
    TARBALL_PREFIX: ""
  script:
    - |
      installdir="$(echo $CI_JOB_NAME | cut -d_ -f1)_install"
      mv quic/RELEASE-NOTES.txt $installdir
      tagname="$(git describe --tags --exact-match --match qemu-hexagon* 2>/dev/null || \
                 { echo -n "qemu_hexagon_" && git rev-parse --short HEAD; } )"
      tarball_name=${TARBALL_PREFIX}${tagname}.tgz
      mkdir -p $TARBALLS_PATH
      tar --exclude-vcs -zcf ${TARBALLS_PATH}/$tarball_name --exclude="$installdir/bin/qemu-hexagon" $installdir
  artifacts:
    paths: [ $TARBALLS_PATH ]
    expire_in: 1 month
  only:
    - tags
    - web
    - schedules

.base-check-tcg:
  extends: .after-build
  script:
    - export QEMU_HEXAGON_COPROC=$PWD
    - make -C $builddir -j check-tcg V=1 OVERRIDE_OPTS="$OVERRIDE_OPTS"
  artifacts:
    when: on_failure
    paths: [ "*_build" ]
    expire_in: 4 days

.base-check:
  extends: .after-build
  script:
    - export QEMU_HEXAGON_COPROC=$PWD
    - make -C $builddir -j check
  artifacts:
    when: on_failure
    paths: [ "*_build" ]
    expire_in: 4 days

.base-qurt-tests:
  extends: .after-build
  script:
    - QQVP_PROJECT_URL="$(eval "$GITLAB_URL")/$CI_PROJECT_ROOT_NAMESPACE"
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/testing/qemu-qurt-tests.git
    - export QEMU_HEXAGON_COPROC=$PWD
    - qemu-qurt-tests/run_tests.sh $builddir/qemu-system-hexagon

.base-sival-tests:
  extends: .after-build
  script:
    - QQVP_PROJECT_URL="$(eval "$GITLAB_URL")/$CI_PROJECT_ROOT_NAMESPACE"
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/testing/qemu-sival-tests.git
    - export QEMU_HEXAGON_COPROC=$PWD
    - qemu-sival-tests/run_tests.sh $builddir/qemu-system-hexagon

##################################################################
#    Jobs
###################################################################

src-tarball:
  # We need GNU tar for the name transformation
  tags:
    - linux
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 1
  script:
    - |
      tagname="$(git describe --tags --exact-match --match qemu-hexagon* 2>/dev/null || \
                 { echo -n "qemu_hexagon_" && git rev-parse --short HEAD && echo -n "_src"; } )"
      tarball_name=${tagname}.tgz
      mkdir -p $TARBALLS_PATH
      tar --exclude-vcs -zcf $TARBALLS_PATH/$tarball_name --exclude $TARBALLS_PATH . --transform "s/\./${CI_PROJECT_NAME}/"
  artifacts:
    paths: [ $TARBALLS_PATH ]
    expire_in: 1 month
  only:
    - tags
    - web
    - schedules

checkpatch:
  extends: .mr-job
  stage: test
  script: .quic-gitlab-ci.d/checkpatch.sh $TARGET_REF $SOURCE_REF
  allow_failure: true

hexagon_build:
  extends: .base-build
  variables: { CONFIG_CMD: $HEX_CONFIG_CMD }
hexagon_install:
  needs: [hexagon_build]
  extends: .base-install
hexagon_tarball:
  needs: [hexagon_install]
  extends: .base-tarball
hexagon_check-tcg:
  needs: [hexagon_build, coproc_build]
  extends: .base-check-tcg
hexagon_check-tcg-MTTCG:
  needs: [hexagon_build, coproc_build]
  extends: .base-check-tcg
  variables: { OVERRIDE_OPTS: "-accel tcg,thread=multi" }
hexagon_check:
  needs: [hexagon_build, coproc_build]
  extends: .base-check
hexagon_qurt-tests:
  extends: .base-qurt-tests
  needs: [hexagon_build, coproc_build]
hexagon_sival-tests:
  extends: .base-sival-tests
  needs: [hexagon_build, coproc_build]

hexagon-win_build:
  image: $CI_REGISTRY/qqvp/containers/qqvp-dev-win:latest
  extends: .base-build
  variables: { CONFIG_CMD: $HEX_WIN_CONFIG_CMD }
hexagon-win_install:
  image: $CI_REGISTRY/qqvp/containers/qqvp-dev-win:latest
  needs: [hexagon-win_build]
  extends: .base-install
hexagon-win_tarball:
  image: $CI_REGISTRY/qqvp/containers/qqvp-dev-win:latest
  needs: [hexagon-win_install]
  extends: .base-tarball
  variables:
    TARBALL_PREFIX: "windows-x86_64-"

hexagon-mac_build:
  tags:
    - mac
  extends: .base-build
  variables: { CONFIG_CMD: $HEX_MAC_CONFIG_CMD }
hexagon-mac_qurt-tests:
  tags:
    - mac
  extends: .base-qurt-tests
  needs: [hexagon-mac_build]
hexagon-mac_sival-tests:
  tags:
    - mac
  extends: .base-sival-tests
  needs: [hexagon-mac_build]

san-hexagon_build:
  extends: .base-build
  variables: { CONFIG_CMD: "$HEX_CONFIG_CMD --enable-sanitizers" }
san-hexagon_install:
  needs: [san-hexagon_build]
  extends: .base-install
san-hexagon_check-tcg:
  needs: [san-hexagon_build, coproc_build]
  extends: .base-check-tcg
san-hexagon_check:
  needs: [san-hexagon_build, coproc_build]
  extends: .base-check
san-hexagon_qurt-tests:
  extends: .base-qurt-tests
  needs: [san-hexagon_build, coproc_build]
san-hexagon_sival-tests:
  extends: .base-sival-tests
  needs: [san-hexagon_build, coproc_build]

no-idef-parser-hexagon_build:
  extends: .base-build
  variables: { CONFIG_CMD: "$HEX_CONFIG_CMD --disable-hexagon-idef-parser" }
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
no-idef-parser-hexagon_install:
  needs: [no-idef-parser-hexagon_build]
  extends: .base-install
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
no-idef-parser-hexagon_check-tcg:
  needs: [no-idef-parser-hexagon_build, coproc_build]
  extends: .base-check-tcg
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
no-idef-parser-hexagon_check:
  needs: [no-idef-parser-hexagon_build, coproc_build]
  extends: .base-check
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"

aarch64_build:
  extends: .base-build
  variables: { CONFIG_CMD: $AARCH64_CONFIG_CMD }
aarch64_install:
  needs: [aarch64_build]
  extends: .base-install
aarch64_check-tcg:
  needs: [aarch64_build]
  extends: .base-check-tcg
aarch64_check:
  needs: [aarch64_build]
  extends: .base-check

test_hexagon_perf:
  extends: .after-build
  needs: [hexagon_build, coproc_build]
  tags:
     - performance-hardware
  # We'll execute a smaller subset of tests, fewer iters for routine
  # commits/MRs.  In a nightly build we can run a comprehensive test.
  before_script:
    -   PERF_TEST_CFG="${PWD}/qemu-hexagon-perf/minimal_test_config.py" ;
        PERF_TEST_CFG_MTTCG="${PWD}/.quic-gitlab-ci.d/mttcg_test_config.py" ;
        PERF_TEST_ITERS="3" ;
        if [[ "${CI_PIPELINE_SOURCE}" == "schedule" ]] || [[ "${CI_PIPELINE_SOURCE}" == "web" ]]; then
            PERF_TEST_CFG="${PWD}/qemu-hexagon-perf/default_test_config.py" ;
            PERF_TEST_ITERS="6";
        fi
  script:
    - echo test for perf - if this fails, check qqvp-dev kernel ver and perf host sysctl ;
      perf stat /bin/true
    - QQVP_PROJECT_URL="$(eval "$GITLAB_URL")/$CI_PROJECT_ROOT_NAMESPACE"
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/testing/qemu-hexagon-perf.git
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${QQVP_PROJECT_URL}/testing/qemu-hexagon-benchmarks.git
    - export QEMU_HEXAGON_COPROC=$PWD
    - res=0 ;
      for mode in default mttcg; do
          cfg=${PERF_TEST_CFG} ;
          if test $mode = mttcg; then
              sys_args='-accel tcg,thread=multi' ;
              cfg=${PERF_TEST_CFG_MTTCG} ;
          fi ;
          ./qemu-hexagon-perf/customer_test_suite.py
              --bench-dir ./qemu-hexagon-benchmarks/
              --qemu-user-bin-dir ${PWD}/hexagon_build/
              --qemu-bin-dir ${PWD}/hexagon_build/
              --output-file ./perf-results-$mode.json
              --test-cfg ${cfg}
              --iters ${PERF_TEST_ITERS}
              --inspector perf-stat
              --sys-args="$sys_args" ;
          res=$(( ${res} + ${?})) ;
      done ;
      exit ${res}
  artifacts:
    when: always
    paths: [ "perf-results-default.json", "perf-results-mttcg.json" ]
    expire_in: 4 days
