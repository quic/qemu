##
##  Copyright(c) 2019-2020 Qualcomm Innovation Center, Inc. All Rights Reserved.
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, see <http://www.gnu.org/licenses/>.
##

# Hexagon doesn't support gdb, so skip the EXTRA_RUNS
EXTRA_RUNS =

# Hexagon has 64K pages, so increase the timeout to keep
# test-mmap from timing out
ifeq ($(CONFIG_DEBUG_TCG),y)
TIMEOUT=90
else
TIMEOUT=40
endif


CFLAGS = -mv69 -O2 -mhvx -mhmx -fvectorize

HEX_SRC=$(SRC_PATH)/tests/tcg/hexagon
VPATH += $(HEX_SRC)

first: $(HEX_SRC)/first.S
	$(CC) -static -mv69 -nostdlib $^ -o $@

HEX_TESTS = first
HEX_TESTS += exec_counters
HEX_TESTS += misc
HEX_TESTS += preg_alias
HEX_TESTS += dual_stores
HEX_TESTS += clrtnew
HEX_TESTS += pred_stores
HEX_TESTS += multi_result
HEX_TESTS += mem_noshuf
HEX_TESTS += gp_rel
HEX_TESTS += circ
HEX_TESTS += pthread_cancel
HEX_TESTS += vector_add_int
HEX_TESTS += scatter_gather
HEX_TESTS += atomics
HEX_TESTS += sfminmax
HEX_TESTS += lsbnew
HEX_TESTS += privcheck
HEX_TESTS += guestcheck
#HEX_TESTS += hmx

TESTS += $(HEX_TESTS)

# These tests raise an exception and return 1 to the shell
# We'll grep for the proper exception number in their stderr
run-privcheck: privcheck
run-guestcheck: guestcheck

run-privcheck:
	$(call run-test, $<, $(QEMU) $< 2> $<.stderr,"$< on $(TARGET_NAME)"); \
	if [ $$? -ne 1 ] ; then \
		return -1; \
	fi
	$(call quiet-command, \
		grep -q "exception 0x1b" $<.stderr, \
		"GREP", "exception 0x1b");

run-guestcheck:
	$(call run-test, $<, $(QEMU) $< 2> $<.stderr,"$< on $(TARGET_NAME)"); \
	if [ $$? -ne 1 ] ; then \
		return -1; \
	fi
	$(call quiet-command, \
		grep -q "exception 0x1a" $<.stderr, \
		"GREP", "exception 0x1a");
