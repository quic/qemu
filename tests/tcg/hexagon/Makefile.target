##
##  Copyright(c) 2019-2022 Qualcomm Innovation Center, Inc. All Rights Reserved.
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, see <http://www.gnu.org/licenses/>.
##

# Hexagon doesn't support gdb, so skip the EXTRA_RUNS
EXTRA_RUNS =

CFLAGS = -mv69 -O2 -mhvx -mhmx -fvectorize
CFLAGS += -Wno-incompatible-pointer-types -Wno-undefined-internal
CFLAGS += -fno-unroll-loops

HEX_SRC=$(SRC_PATH)/tests/tcg/hexagon
VPATH += $(HEX_SRC)

first: $(HEX_SRC)/first.S
	$(CC) -static -mv69 -nostdlib $^ -o $@
invalid_immext: $(HEX_SRC)/invalid_immext.S
	$(CC) -static -mv69 -mhvx -mhvx-ieee-fp -nostdlib $^ -o $@
invalid_vhist: $(HEX_SRC)/invalid_vhist.S
	$(CC) -static -mv69 -mhvx -nostdlib $^ -o $@

HEX_TESTS = first
HEX_TESTS += invalid_immext
HEX_TESTS += invalid_vhist
HEX_TESTS += exec_counters
HEX_TESTS += hex_sigsegv
HEX_TESTS += misc
HEX_TESTS += usr
HEX_TESTS += preg_alias
HEX_TESTS += dual_stores
HEX_TESTS += clrtnew
HEX_TESTS += pred_stores
HEX_TESTS += multi_result
HEX_TESTS += mem_noshuf
HEX_TESTS += mem_noshuf_exception
HEX_TESTS += circ
HEX_TESTS += brev
HEX_TESTS += load_unpack
HEX_TESTS += load_align
HEX_TESTS += fpstuff
HEX_TESTS += overflow
HEX_TESTS += hvx_misc
HEX_TESTS += gp_rel
HEX_TESTS += pthread_cancel
HEX_TESTS += vector_add_int
HEX_TESTS += scatter_gather
HEX_TESTS += atomics
HEX_TESTS += sfminmax
HEX_TESTS += lsbnew
HEX_TESTS += privcheck
HEX_TESTS += guestcheck
HEX_TESTS += hvx_histogram
HEX_TESTS += hvx_sat
HEX_TESTS += usr_ctrl_assign
#HEX_TESTS += hmx

TESTS += $(HEX_TESTS)

hvx_misc: CFLAGS += -mhvx
hvx_histogram: CFLAGS += -mhvx -Wno-gnu-folding-constant

# This test has to be compiled for the -mv67t target
usr: usr.c
	$(CC) $(CFLAGS) -mv67t -O2 -Wno-expansion-to-defined $< -o $@ $(LDFLAGS)

hvx_histogram: hvx_histogram.c hvx_histogram_row.S
	$(CC) $(CFLAGS) $(CROSS_CC_GUEST_CFLAGS) $^ -o $@

usr_ctrl_assign: usr_ctrl_assign.c usr_ctrl_assign_pass.S
	$(CC) $(CFLAGS) $(CROSS_CC_GUEST_CFLAGS) $^ -o $@

# Run some tests with paranoid-commit-state turned on
run-misc: misc
run-usr: usr
run-preg_alias: preg_alias
run-dual_stores: dual_stores
run-pred_stores: pred_stores
run-multi_result: multi_result
run-mem_noshuf: mem_noshuf
run-hvx_misc: hvx_misc
run-scatter_gather: scatter_gather
run-hvx_histogram: hvx_histogram
run-hvx_sat: hvx_sat

PARANOID_OPTS=-cpu any,paranoid-commit-state=true
run-misc run-usr run-preg_alias run-dual_stores run-pred_stores run-multi_result run-mem_noshuf \
run-hvx_misc run-scatter_gather run-hvx_histogram run-hvx_sat:
	$(call run-test, $<, $(QEMU) $<, "$< on $(TARGET_NAME)")
	$(call run-test, $<, $(QEMU) $(PARANOID_OPTS) $<, "$< on $(TARGET_NAME) paranoid")

# These tests raise an exception and return 1 to the shell
# We'll grep for the proper exception number in their stderr
run-privcheck: privcheck
run-guestcheck: guestcheck

run-privcheck:
	$(call run-test, $<, $(QEMU) $< 2> $<.stderr,"$< on $(TARGET_NAME)"); \
	if [ $$? -ne 1 ] ; then \
		return -1; \
	fi
	$(call quiet-command, \
		grep -q "exception 0x1b" $<.stderr, \
		"GREP", "exception 0x1b");

run-guestcheck:
	$(call run-test, $<, $(QEMU) $< 2> $<.stderr,"$< on $(TARGET_NAME)"); \
	if [ $$? -ne 1 ] ; then \
		return -1; \
	fi
	$(call quiet-command, \
		grep -q "exception 0x1a" $<.stderr, \
		"GREP", "exception 0x1a");

TESTS += $(HEX_TESTS)

# This test has to be compiled for the -mv67t target
usr: usr.c
	$(CC) $(CFLAGS) -mv67t -O2 -Wno-inline-asm -Wno-expansion-to-defined $< -o $@ $(LDFLAGS)

