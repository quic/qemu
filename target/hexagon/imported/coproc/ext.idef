/*************************************************************************************
*
* NPU matrix multiply instruction
*
***************************************************************************************/

#ifndef EXTINSN
#define EXTINSN Q6INSN
#define __SELF_DEF_EXTINSN 1
#endif


#define MX_ACT(TAG,SYNTAX, TYPE, FORMAT_OFFSET, BLOCK_TYPE, EXTRA_ATTRIBS) \
EXTINSN(TAG,SYNTAX,ATTRIBS(A_COPROC,A_LOAD,A_MEMLIKE,A_PAIR_1OF2),"",  \
{\
    RsV = RsV;\
    RtV = RtV;\
})


#define MXMEM_WGT(TAG,SYNTAX,TYPE,WEIGHTS_PER_BYTE_LOG,WGT_PER_WORD,UNPACK,BLOCK_TYPE,MULT_TYPE,OUTPUT_CHANNEL_SCALE,EXTRA_ATTRIBS) \
EXTINSN(TAG,SYNTAX,ATTRIBS(A_COPROC,A_LOAD,A_MEMLIKE,A_RESTRICT_SLOT0ONLY),"",  \
{\
    RsV = RsV;\
    RtV = RtV;\
})


#define FORMAT_DM 0
#define FORMAT_SM 2

#define MULTI_BLOCK 0
#define SINGLE_BLOCK_ONLY 1

#define MX_ALIGNED 0
#define MX_ABOVE 1


#define MXMEM_ACT_INSN(TYPE, TYPE2, ELEMENT, EXTRA_ATTRIBS) \
MX_ACT(M8_mxmem_blk_sm_act_##TYPE,  "activation." TYPE2 "=mxmem(Rs32,Rt32)",              ELEMENT, FORMAT_SM, COPROC_ACT_BLOCK,  EXTRA_ATTRIBS)\
MX_ACT(M8_mxmem_sm_act_##TYPE,      "activation." TYPE2 "=mxmem(Rs32,Rt32):deep",         ELEMENT, FORMAT_SM, COPROC_ACT_DEEP,   EXTRA_ATTRIBS)\
MX_ACT(M8_mxmemu_blk_sm_act_##TYPE, "activation." TYPE2 "=mxmem(Rs32,Rt32):above",        ELEMENT, FORMAT_SM, COPROC_ACT_ABOVE,  EXTRA_ATTRIBS)\
MX_ACT(M8_mxmems_blk_sm_act_##TYPE, "activation." TYPE2 "=mxmem(Rs32,Rt32):single",       ELEMENT, FORMAT_SM, COPROC_ACT_SINGLE, EXTRA_ATTRIBS)\
MX_ACT(M8_mxmemd_blk_sm_act_##TYPE, "activation." TYPE2 "=mxmem(Rs32,Rt32):dilate",       ELEMENT, FORMAT_SM, COPROC_ACT_DILATE, EXTRA_ATTRIBS)

MXMEM_ACT_INSN(ub, "ub", COPROC_UB,   fMX_NONE)
MXMEM_ACT_INSN(hf, "hf", COPROC_FP16, fMX_COPROC_FLT)


// channel major doesn't fix nicely withe macro...
MX_ACT(M8_mxmem_blk_dm_act_ub,  "activation.ub=mxmem(Rs32,Rt32):cm",           COPROC_UB, FORMAT_DM, COPROC_ACT_BLOCK,  fMX_NONE)
MX_ACT(M8_mxmem_dm_act_ub,      "activation.ub=mxmem(Rs32,Rt32):deep:cm",      COPROC_UB, FORMAT_DM, COPROC_ACT_DEEP,   fMX_NONE)
MX_ACT(M8_mxmemu_blk_dm_act_ub, "activation.ub=mxmem(Rs32,Rt32):above:cm",     COPROC_UB, FORMAT_DM, COPROC_ACT_ABOVE,  fMX_NONE)
MX_ACT(M8_mxmems_blk_dm_act_ub, "activation.ub=mxmem(Rs32,Rt32):single:cm",    COPROC_UB, FORMAT_DM, COPROC_ACT_SINGLE, fMX_NONE)
MX_ACT(M8_mxmemd_blk_dm_act_ub, "activation.ub=mxmem(Rs32,Rt32):dilate:cm",    COPROC_UB, FORMAT_DM, COPROC_ACT_DILATE, fMX_NONE)


#define MXMEM_WGT_INSN(TYPE, TYPE2, TYPE3, SCALE, WGT_PER_WORD, UNPACK, ELEMENT,  MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS) \
MXMEM_WGT(M8_mxmem_wei_##TYPE,        "weight." TYPE2 "=mxmem(Rs32,Rt32)" TYPE3 ,          ELEMENT,  SCALE, WGT_PER_WORD, UNPACK, COPROC_WEI_NORMAL, MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS) \
MXMEM_WGT(M8_mxmems_wei_##TYPE,       "weight." TYPE2 "=mxmem(Rs32,Rt32)" TYPE3 ":single", ELEMENT,  SCALE, WGT_PER_WORD, UNPACK, COPROC_WEI_SINGLE, MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS) \
MXMEM_WGT(M8_mxmemdr_wei_##TYPE,      "weight." TYPE2 "=mxmem(Rs32,Rt32)" TYPE3 ":drop",   ELEMENT,  SCALE, WGT_PER_WORD, UNPACK, COPROC_WEI_DROP,   MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS) \
MXMEM_WGT(M8_mxmemdp_wei_##TYPE,      "weight." TYPE2 "=mxmem(Rs32,Rt32)" TYPE3 ":deep",   ELEMENT,  SCALE, WGT_PER_WORD, UNPACK, COPROC_WEI_DEEP,   MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS) \
MXMEM_WGT(M8_mxmema_wei_##TYPE,       "weight." TYPE2 "=mxmem(Rs32,Rt32)" TYPE3 ":after",  ELEMENT,  SCALE, WGT_PER_WORD, UNPACK, COPROC_WEI_AFTER,  MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS) \
MXMEM_WGT(M8_mxmemdi_wei_##TYPE,      "weight." TYPE2 "=mxmem(Rs32,Rt32)" TYPE3 ":dilate", ELEMENT,  SCALE, WGT_PER_WORD, UNPACK, COPROC_WEI_DILATE, MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS)

#define OUTPUT_CHANNELS_1X 1
#define OUTPUT_CHANNELS_2X 2

MXMEM_WGT_INSN(b,   "b",,        0,  4, COPROC_UNPACK_BYTE_FROM_BYTE,   COPROC_B,     COPROC_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(sm,  "sm",,       0,  4, COPROC_UNPACK_SM_FROM_BYTE,     COPROC_B,     COPROC_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(n,   "n",,        1,  8, COPROC_UNPACK_NIBBLE_FROM_BYTE, COPROC_B,     COPROC_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(c,   "c",,        2, 16, COPROC_UNPACK_CRUMB_FROM_BYTE,  COPROC_B,     COPROC_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(sc,  "sc",,       2, 16, COPROC_UNPACK_SCRUMB_FROM_BYTE, COPROC_B,     COPROC_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(b1,  "ubit",,     3, 32, COPROC_UNPACK_1BIT_FROM_BYTE,   COPROC_B,     COPROC_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(sb1, "sbit",,     3, 32, COPROC_UNPACK_1SBIT_FROM_BYTE,  COPROC_B,     COPROC_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(n_2x, "n", ":2x", 1,  8, COPROC_UNPACK_NIBBLE_FROM_BYTE, COPROC_B,     COPROC_MULT_FXP_SUBBYTE, OUTPUT_CHANNELS_2X, fMX_SUB_COLS)
MXMEM_WGT_INSN(hf,  "hf",,       0,  2, COPROC_UNPACK_NONE,             COPROC_FP16,  COPROC_MULT_XFP,         OUTPUT_CHANNELS_1X, fMX_COPROC_FLT)


///// CONVERTS //////

// Based on Rs32 from CVT transfer
#define SUBCHANNEL0 0
#define SUBCHANNEL1 2
#define POLY_CONVERT 0
#define LEGACY_CONVERT 1
#define BF16_BIT_UNUSED 0
#define XFP_RND_BIT_UNUSED 0
#define COPROC_ACC_CLEAR 0
#define COPROC_ACC_RETAIN 1

#define COPROC_RELU 0
#define COPROC_NO_RELU 1

#define MXMEM_CONVERT_LEGACY(TAG,OPCODE,TYPE,SAT,FORMAT_OFFSET,RSV,RTV,DIRECTION,CLEAR_ACC,EXTRA_ATTRIB) \
EXTINSN(TAG, OPCODE,  ATTRIBS(A_COPROC,A_MEMLIKE,A_RESTRICT_SLOT0ONLY,A_STORE),"",  \
{\
    RsV = RsV;\
    RtV = RtV;\
})


#define MXCVT_RS(TAG,OPCODE,TYPE,RSV, SUBCHANNEL_SELECT,EXTRA_ATTRIB) \
EXTINSN(TAG, OPCODE,  ATTRIBS(A_COPROC,A_MEMLIKE,A_RESTRICT_SLOT0ONLY),"",  \
{\
    RsV = RsV;\
})


#define MXST(TAG,OPCODE,FORMAT,TYPE,RSV,RTV,EXTRA_ATTRIB) \
EXTINSN(TAG, OPCODE,  ATTRIBS(A_COPROC,A_MEMLIKE,A_RESTRICT_SLOT0ONLY,A_STORE),"",  \
{\
    RsV = RsV;\
    RtV = RtV;\
})


#define MXMEMCVT_LEGACY(TAGL, TAGR, TAGTYPE, TAGPOS, FORMAT_TYPE, FORMAT, DTYPE, TYPE, ACC, POS,EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGL##_sat_##TAGTYPE,         "mxmem(Rs32,Rt32):before"        FORMAT_TYPE ":sat" DTYPE "=acc" ACC, TYPE, COPROC_RELU,    FORMAT, RsV, RtV, COPROC_CVT_BEFORE, COPROC_ACC_CLEAR,  EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGL##_##TAGPOS##TAGTYPE,     "mxmem(Rs32,Rt32):before"        FORMAT_TYPE    POS DTYPE "=acc" ACC, TYPE, COPROC_NO_RELU, FORMAT, RsV, RtV, COPROC_CVT_BEFORE, COPROC_ACC_CLEAR,  EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGL##_sat_##TAGTYPE##_r,     "mxmem(Rs32,Rt32):before:retain" FORMAT_TYPE ":sat" DTYPE "=acc" ACC, TYPE, COPROC_RELU,    FORMAT, RsV, RtV, COPROC_CVT_BEFORE, COPROC_ACC_RETAIN, EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGL##_##TAGPOS##TAGTYPE##_r, "mxmem(Rs32,Rt32):before:retain" FORMAT_TYPE    POS DTYPE "=acc" ACC, TYPE, COPROC_NO_RELU, FORMAT, RsV, RtV, COPROC_CVT_BEFORE, COPROC_ACC_RETAIN, EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGR##_sat_##TAGTYPE,         "mxmem(Rs32,Rt32):after"         FORMAT_TYPE ":sat" DTYPE "=acc" ACC, TYPE, COPROC_RELU,    FORMAT, RsV, RtV, COPROC_CVT_AFTER,  COPROC_ACC_CLEAR,  EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGR##_##TAGPOS##TAGTYPE,     "mxmem(Rs32,Rt32):after"         FORMAT_TYPE   POS  DTYPE "=acc" ACC, TYPE, COPROC_NO_RELU, FORMAT, RsV, RtV, COPROC_CVT_AFTER,  COPROC_ACC_CLEAR,  EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGR##_sat_##TAGTYPE##_r,     "mxmem(Rs32,Rt32):after:retain"  FORMAT_TYPE ":sat" DTYPE "=acc" ACC, TYPE, COPROC_RELU,    FORMAT, RsV, RtV, COPROC_CVT_AFTER,  COPROC_ACC_RETAIN, EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGR##_##TAGPOS##TAGTYPE##_r, "mxmem(Rs32,Rt32):after:retain"  FORMAT_TYPE    POS DTYPE "=acc" ACC, TYPE, COPROC_NO_RELU, FORMAT, RsV, RtV, COPROC_CVT_AFTER,  COPROC_ACC_RETAIN, EXTRA_ATTRIB)

MXMEMCVT_LEGACY(l_dm, r_dm, ub,           , ":cm", FORMAT_DM, ".ub", COPROC_UB,    "",     "",     fMX_NONE)
MXMEMCVT_LEGACY(l,    r,    ub,           ,    "", FORMAT_SM, ".ub", COPROC_UB,    "",     "",     fMX_NONE)
MXMEMCVT_LEGACY(b,    a,    uh,           ,    "", FORMAT_SM, ".uh", COPROC_UH,    ":2x1", "",     fMX_NONE)
MXMEMCVT_LEGACY(b,    a,    uh2x2,        ,    "", FORMAT_SM, ".uh", COPROC_UH_UH, ":2x2", "",     fMX_NONE)
//MXMEMCVT_LEGACY(l,    r,    hf,   sat_pos_,    "", FORMAT_SM, ".hf", COPROC_FP16,  "",     ":pos", fMX_COPROC_FLT)

MXMEM_CONVERT_LEGACY(M8_mxcvtl_sat_hf,       "mxmem(Rs32,Rt32):before.hf=acc",            COPROC_FP16, COPROC_NO_RELU, FORMAT_SM, RsV, RtV, COPROC_CVT_BEFORE, COPROC_ACC_CLEAR,  fMX_COPROC_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtl_sat_pos_hf,   "mxmem(Rs32,Rt32):before:pos.hf=acc",        COPROC_FP16, COPROC_RELU,    FORMAT_SM, RsV, RtV, COPROC_CVT_BEFORE, COPROC_ACC_CLEAR,  fMX_COPROC_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtl_sat_hf_r,     "mxmem(Rs32,Rt32):before:retain.hf=acc",     COPROC_FP16, COPROC_NO_RELU, FORMAT_SM, RsV, RtV, COPROC_CVT_BEFORE, COPROC_ACC_RETAIN, fMX_COPROC_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtl_sat_pos_hf_r, "mxmem(Rs32,Rt32):before:retain:pos.hf=acc", COPROC_FP16, COPROC_RELU,    FORMAT_SM, RsV, RtV, COPROC_CVT_BEFORE, COPROC_ACC_RETAIN, fMX_COPROC_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtr_sat_hf,       "mxmem(Rs32,Rt32):after.hf=acc",             COPROC_FP16, COPROC_NO_RELU, FORMAT_SM, RsV, RtV, COPROC_CVT_AFTER,  COPROC_ACC_CLEAR,  fMX_COPROC_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtr_sat_pos_hf,   "mxmem(Rs32,Rt32):after:pos.hf=acc",         COPROC_FP16, COPROC_RELU,    FORMAT_SM, RsV, RtV, COPROC_CVT_AFTER,  COPROC_ACC_CLEAR,  fMX_COPROC_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtr_sat_hf_r,     "mxmem(Rs32,Rt32):after:retain.hf=acc",      COPROC_FP16, COPROC_NO_RELU, FORMAT_SM, RsV, RtV, COPROC_CVT_AFTER,  COPROC_ACC_RETAIN, fMX_COPROC_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtr_sat_pos_hf_r, "mxmem(Rs32,Rt32):after:retain:pos.hf=acc",  COPROC_FP16, COPROC_RELU,    FORMAT_SM, RsV, RtV, COPROC_CVT_AFTER,  COPROC_ACC_RETAIN, fMX_COPROC_FLT)

MXCVT_RS(M8_cvt_rs_ub,     "cvt.ub=acc(Rs32)",     COPROC_UB,      RsV, SUBCHANNEL0, fMX_NONE)
MXCVT_RS(M8_cvt_rs_ub_sc0, "cvt.ub=acc(Rs32):sc0", COPROC_UB4,     RsV, SUBCHANNEL0, fMX_SUB_COLS)
MXCVT_RS(M8_cvt_rs_ub_sc1, "cvt.ub=acc(Rs32):sc1", COPROC_UB4,     RsV, SUBCHANNEL1, fMX_SUB_COLS)
MXCVT_RS(M8_cvt_rs_uh_2x1, "cvt.uh=acc(Rs32):2x1", COPROC_UH,      RsV, SUBCHANNEL0, fMX_NONE)
MXCVT_RS(M8_cvt_rs_uh_2x2, "cvt.uh=acc(Rs32):2x2", COPROC_UH_UH,   RsV, SUBCHANNEL0, fMX_NONE)
MXCVT_RS(M8_cvt_rs_hf,     "cvt.hf=acc(Rs32)",     COPROC_FP16,    RsV, SUBCHANNEL0, fMX_COPROC_FLT)

MXST(M8_mxmem,     "mxmem(Rs32,Rt32)=cvt",     FORMAT_SM, COPROC_UB,    RsV, RtV, fMX_NONE)
MXST(M8_mxmem_cm,  "mxmem(Rs32,Rt32):cm=cvt",  FORMAT_DM, COPROC_UB,    RsV, RtV, fMX_NONE)
MXST(M8_mxmem_2x2, "mxmem(Rs32,Rt32):2x2=cvt", FORMAT_SM, COPROC_UH_UH, RsV, RtV, fMX_HIDEHTML)


/// MISC INSNS ////


EXTINSN(M8_mxmem_bias,  "bias=mxmem(Rs32)",  ATTRIBS(A_COPROC,A_LOAD,A_MEMLIKE,A_RESTRICT_NOSLOT1,A_RESTRICT_SLOT0ONLY), "",
{\
    RsV = RsV;\
})

EXTINSN(M8_mxmem_st_bias,    "mxmem(Rs32)=bias", ATTRIBS(A_COPROC,A_MEMLIKE,A_RESTRICT_NOSLOT1,A_RESTRICT_SLOT0ONLY,A_STORE), "", \
{\
    RsV = RsV;\
})


EXTINSN(M8_mxmem2_bias,  "bias=mxmem2(Rs32)",  ATTRIBS(A_COPROC,A_LOAD,A_MEMLIKE,A_RESTRICT_NOSLOT1,A_RESTRICT_SLOT0ONLY), "",
{\
    RsV = RsV;\
})

EXTINSN(M8_mxmem2_st_bias,    "mxmem2(Rs32)=bias", ATTRIBS(A_COPROC,A_MEMLIKE,A_RESTRICT_NOSLOT1,A_RESTRICT_SLOT0ONLY,A_STORE), "", \
{\
    RsV = RsV;\
})




EXTINSN(M8_mxclracc,    "mxclracc",     ATTRIBS(A_COPROC,A_MEMLIKE,A_MEMLIKE_PACKET_RULES,A_RESTRICT_SLOT0ONLY), "", {})
EXTINSN(M8_mxclracc_hf, "mxclracc.hf",  ATTRIBS(A_COPROC,A_MEMLIKE,A_MEMLIKE_PACKET_RULES,A_RESTRICT_SLOT0ONLY), "", {})
EXTINSN(M8_mxswap,      "mxswapacc",    ATTRIBS(A_COPROC,A_MEMLIKE,A_MEMLIKE_PACKET_RULES,A_RESTRICT_SLOT0ONLY), "", {})
EXTINSN(M8_mxswap_hf,   "mxswapacc.hf", ATTRIBS(A_COPROC,A_MEMLIKE,A_MEMLIKE_PACKET_RULES,A_RESTRICT_SLOT0ONLY), "", {})


EXTINSN(M8_mxaccshl,    "acc=mxshl(acc,#16)",     ATTRIBS(A_COPROC,A_MEMLIKE,A_MEMLIKE_PACKET_RULES,A_RESTRICT_SLOT0ONLY), "",
{\
})



// DEBUG PRINTS, VECX attribute for now, probably doesn't need any attribute
EXTINSN(M8_pv64d, "pmxd", ATTRIBS(A_COPROC,A_MEMLIKE), "", {})
EXTINSN(M8_pv64,  "pmx",  ATTRIBS(A_COPROC,A_MEMLIKE), "", {})
EXTINSN(M8_pv64dfp, "pmxfpd", ATTRIBS(A_COPROC,A_MEMLIKE), "", {})
EXTINSN(M8_pv64fp,  "pmxfp",  ATTRIBS(A_COPROC,A_MEMLIKE), "", {})

#ifdef __SELF_DEF_EXTINSN
#undef EXTINSN
#undef __SELF_DEF_EXTINSN
#endif

