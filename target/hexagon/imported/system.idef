/*
 *  Copyright(c) 2019-2021 Qualcomm Innovation Center, Inc. All Rights Reserved.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 * System Interface Instructions
 */


/********************************************/
/* Power Management / Thread on/off         */
/********************************************/
Q6INSN(Y2_stop,"stop(Rs32)",ATTRIBS(A_PRIV,A_RESTRICT_NOPACKET),"Stop thread(s)",{
    fHIDE(RsV=RsV;)
    if (!fIN_DEBUG_MODE_NO_ISDB(fGET_TNUM())) fCLEAR_RUN_MODE(fGET_TNUM());
})

Q6INSN(Y4_nmi,"nmi(Rs32)",ATTRIBS(A_PRIV,A_RESTRICT_NOPACKET,A_NO_TIMING_LOG),"Raise NMI on thread(s)",{
    fDO_NMI(RsV);
})

Q6INSN(Y2_start,"start(Rs32)",ATTRIBS(A_PRIV,A_RESTRICT_NOPACKET),"Start thread(s)",fSTART(RsV);)

Q6INSN(Y2_wait,"wait(Rs32)",ATTRIBS(A_PRIV,A_RESTRICT_NOPACKET,A_NO_TIMING_LOG),"Make thread(s) wait",{
    fHIDE(RsV=RsV;)
    if (!fIN_DEBUG_MODE(fGET_TNUM())) fSET_WAIT_MODE(fGET_TNUM());
	fIN_DEBUG_MODE_WARN(fGET_TNUM());
})

Q6INSN(Y2_resume,"resume(Rs32)",ATTRIBS(A_PRIV,A_RESTRICT_NOPACKET),"Make thread(s) stop waiting",fRESUME(RsV);)

Q6INSN(Y2_break,"brkpt",ATTRIBS(A_RESTRICT_NOPACKET),"Breakpoint",{fBREAK();})


/********************************************/
/* User->OS interface                       */
/********************************************/

Q6INSN(J2_trap0,"trap0(#u8)",ATTRIBS(A_COF),
"Trap to Operating System",
    fTRAP(0,uiV);
)

Q6INSN(J2_trap1,"trap1(Rx32,#u8)",ATTRIBS(A_COF,A_RESTRICT_NOPACKET),
"Trap to Operating System",
)

Q6INSN(J2_pause,"pause(#u8)",ATTRIBS(A_COF),
"Enter low-power state for #u8 cycles",{fPAUSE(uiV);})
Q6INSN(J2_rte,  "rte", ATTRIBS(A_PRIV,A_NO_TIMING_LOG),
"Return from Exception",
{
fHIDE(if((thread->timing_on) && (thread->status & EXEC_STATUS_REPLAY)) { return; })
fHIDE(HEX_CALLBACK(thread->processor_ptr->options->rte_callback,
      thread->system_ptr,thread->processor_ptr,
      thread->threadId,0);)
fCLEAR_RTE_EX();
fBRANCH(fREAD_ELR(),COF_TYPE_RTE);})


Q6INSN(Y2_icinva,"icinva(Rs32)",ATTRIBS(A_ICOP,A_ICFLUSHOP),"Instruction Cache Invalidate Address",{fEA_REG(RsV); fICINVA(EA);})

Q6INSN(Y2_isync,"isync",ATTRIBS(),"Memory Synchronization",{fISYNC();})
Q6INSN(Y2_barrier,"barrier",ATTRIBS(A_RESTRICT_SLOT0ONLY),"Memory Barrier",{fBARRIER();})
Q6INSN(Y2_syncht,"syncht",ATTRIBS(A_RESTRICT_SLOT0ONLY),"Memory Synchronization",{fSYNCH();})


Q6INSN(Y2_dcfetchbo,"dcfetch(Rs32+#u11:3)",ATTRIBS(A_RESTRICT_PREFERSLOT0,A_DCFETCH),"Data Cache Prefetch",{fEA_RI(RsV,uiV); fDCFETCH(EA);})


Q6INSN(Y2_dczeroa,"dczeroa(Rs32)",ATTRIBS(A_STORE,A_RESTRICT_SLOT0ONLY,A_DCZEROA),"Zero an aligned 32-byte cacheline",{fEA_REG(RsV); fDCZEROA(EA);})
Q6INSN(Y2_dccleana,"dccleana(Rs32)",ATTRIBS(A_RESTRICT_SLOT0ONLY,A_DCFLUSHOP),"Data Cache Clean Address",{fEA_REG(RsV); fDCCLEANA(EA);})
Q6INSN(Y2_dccleaninva,"dccleaninva(Rs32)",ATTRIBS(A_RESTRICT_SLOT0ONLY,A_DCFLUSHOP),"Data Cache Clean and Invalidate Address",{fEA_REG(RsV); fDCCLEANINVA(EA);})
Q6INSN(Y2_dcinva,"dcinva(Rs32)",ATTRIBS(A_RESTRICT_SLOT0ONLY,A_DCFLUSHOP),"Data Cache Invalidate Address",{fEA_REG(RsV); fDCCLEANINVA(EA);})


Q6INSN(Y4_l2fetch,"l2fetch(Rs32,Rt32)",ATTRIBS(A_RESTRICT_SLOT0ONLY),"L2 Cache Prefetch",
{ fL2FETCH(RsV,
           (RtV&0xff), /*height*/
           ((RtV>>8)&0xff), /*width*/
           ((RtV>>16)&0xffff), /*stride*/
           0); /*extra attrib flags*/
})



Q6INSN(Y5_l2fetch,"l2fetch(Rs32,Rtt32)",ATTRIBS(A_RESTRICT_SLOT0ONLY),"L2 Cache Prefetch",
{ fL2FETCH(RsV,
           fGETUHALF(0,RttV), /*height*/
           fGETUHALF(1,RttV), /*width*/
           fGETUHALF(2,RttV), /*stride*/
           fGETUHALF(3,RttV)); /*flags*/
})

/********************************************/
/* Interrupt Management                     */
/********************************************/

Q6INSN(Y2_swi,"swi(Rs32)",ATTRIBS(A_PRIV,A_RESTRICT_PACKET_AXOK),"Software Interrupt",{DO_SWI(RsV);})
Q6INSN(Y2_cswi,"cswi(Rs32)",ATTRIBS(A_PRIV,A_RESTRICT_PACKET_AXOK),"Cancel Software Interrupt",{DO_CSWI(RsV);})
Q6INSN(Y2_ciad,"ciad(Rs32)",ATTRIBS(A_PRIV,A_RESTRICT_PACKET_AXOK),"Re-enable interrupt in IAD",{DO_CIAD(RsV);})
Q6INSN(Y4_siad,"siad(Rs32)",ATTRIBS(A_PRIV,A_RESTRICT_PACKET_AXOK),"Disable interrupt in IAD",{DO_SIAD(RsV);})
Q6INSN(Y2_iassignr,"Rd32=iassignr(Rs32)",ATTRIBS(A_PRIV,A_RESTRICT_PACKET_AXOK),"Read interrupt to thread assignments",{DO_IASSIGNR(RsV,RdV);})
Q6INSN(Y2_iassignw,"iassignw(Rs32)",ATTRIBS(A_PRIV,A_RESTRICT_PACKET_AXOK),"Write interrupt to thread assignments",{DO_IASSIGNW(RsV);})
Q6INSN(Y2_getimask,"Rd32=getimask(Rs32)",ATTRIBS(A_PRIV,A_RESTRICT_PACKET_AXOK),"Read imask register of another thread",
{RdV = READ_IMASK(RsV & thread->processor_ptr->thread_system_mask); })

Q6INSN(Y2_setimask,"setimask(Pt4,Rs32)",ATTRIBS(A_PRIV,A_RESTRICT_PACKET_AXOK),"Change imask register of another thread",
{fPREDUSE_TIMING();WRITE_IMASK(PtV & thread->processor_ptr->thread_system_mask,RsV); })

/********************************************/
/* Supervisor Reg Management                */
/********************************************/


Q6INSN(Y2_crswap0,"crswap(Rx32,sgp0)",ATTRIBS(A_PRIV), "Swap system general pointer 0 with GPR",
{fHIDE(size4s_t tmp;) tmp = RxV; RxV = READ_SGP0(); WRITE_SGP0(tmp);})
Q6INSN(Y4_crswap1,"crswap(Rx32,sgp1)",ATTRIBS(A_PRIV), "Swap system general pointer 1 with GPR",
{fHIDE(size4s_t tmp;) tmp = RxV; RxV = READ_SGP1(); WRITE_SGP1(tmp);})

Q6INSN(Y4_crswap10,"crswap(Rxx32,sgp1:0)",ATTRIBS(A_PRIV), "Swap system general purpose 0/1 with GPR Pair",
{fHIDE(size8s_t tmp;) tmp = RxxV; RxxV=READ_SGP10(); WRITE_SGP10(tmp);})

Q6INSN(Y2_tfrscrr,"Rd32=Ss128",ATTRIBS(A_PRIV),"Transfer Supervisor Reg to GPR", {RdV=SsV;})
Q6INSN(Y2_tfrsrcr,"Sd128=Rs32",ATTRIBS(A_PRIV),"Transfer GPR to Supervisor Reg", {SdV=RsV;})
Q6INSN(Y4_tfrscpp,"Rdd32=Sss128",ATTRIBS(A_PRIV),"Transfer Supervisor Reg to GPR", {RddV=SssV;})
Q6INSN(Y4_tfrspcp,"Sdd128=Rss32",ATTRIBS(A_PRIV),"Transfer GPR to Supervisor Reg", {SddV=RssV;})

Q6INSN(G4_tfrgcrr,"Rd32=Gs32",ATTRIBS(A_GUEST),"Transfer Guest Reg to GPR", {RdV=GsV;})
Q6INSN(G4_tfrgrcr,"Gd32=Rs32",ATTRIBS(A_GUEST),"Transfer GPR to Guest Reg", {GdV=RsV;})
Q6INSN(G4_tfrgcpp,"Rdd32=Gss32",ATTRIBS(A_GUEST),"Transfer Guest Reg to GPR", {RddV=GssV;})
Q6INSN(G4_tfrgpcp,"Gdd32=Rss32",ATTRIBS(A_GUEST),"Transfer GPR to Guest Reg", {GddV=RssV;})



Q6INSN(Y2_setprio,"setprio(Pt4,Rs32)",ATTRIBS(A_PRIV),"Change TID Prio of another thread",
{fPREDUSE_TIMING();WRITE_PRIO(PtV & thread->processor_ptr->thread_system_mask,RsV); })
