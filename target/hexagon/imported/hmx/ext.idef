/*************************************************************************************
*
* NPU matrix multiply instruction
*
***************************************************************************************/

#ifndef EXTINSN
#define EXTINSN Q6INSN
#define __SELF_DEF_EXTINSN 1
#endif


#define MX_ACT(TAG,SYNTAX, TYPE, FORMAT_OFFSET, BLOCK_TYPE, EXTRA_ATTRIBS) \
EXTINSN(TAG,SYNTAX,ATTRIBS(A_SHARED_EXTENSION,A_HMX,A_LOAD,A_MEMLIKE,A_VTCM_ALLBANK_ACCESS,A_EA_PAGECROSS,A_HMX_BLOCK_ALIGN,A_NOTE_MX_PAIR,A_PAIR_1OF2),"Matrix Multiply",  \
{\
	fHIDE(EXTRA_ATTRIBS();)\
	fHIDE(fMX_ACT_XLATE(RsV, RtV);)\
	fHIDE(fMX_GET_HMX_STATE(state);)\
	fHIDE(fMX_SET_PKTID(state, thread);)\
	fHIDE(fMX_ACT_PARAMETERS(state, RsV, RtV, TYPE, FORMAT_OFFSET, BLOCK_TYPE);)\
})	

#define MXMEM_WGT(TAG,SYNTAX,TYPE,WEIGHTS_PER_BYTE_LOG,WGT_PER_WORD,UNPACK,BLOCK_TYPE,MULT_TYPE,OUTPUT_CHANNEL_SCALE,EXTRA_ATTRIBS) \
EXTINSN(TAG,SYNTAX,ATTRIBS(A_SHARED_EXTENSION,A_HMX,A_LOAD,A_RESTRICT_SLOT0ONLY,A_MEMLIKE,A_MPY,A_VTCM_ALLBANK_ACCESS,A_EA_PAGECROSS,A_HMX_128B_ALIGN,A_NOTE_MX_PAIR,A_PAIR_2OF2),"Matrix Multiply",  \
{\
	fHIDE(EXTRA_ATTRIBS();)\
	fHIDE(fMX_GET_HMX_STATE(state);)\
	fHIDE(fMX_SET_PKTID(state, thread);)\
	fHIDE(fMX_WGT_XLATE(RsV, RtV, WEIGHTS_PER_BYTE_LOG, OUTPUT_CHANNEL_SCALE);)\
	fHIDE(fMX_WGT_PARAMETERS(state, RsV, RtV, TYPE, BLOCK_TYPE, WEIGHTS_PER_BYTE_LOG, OUTPUT_CHANNEL_SCALE, UNPACK, hmx_get_usr_reg_coproc_field(thread));)\
	fHIDE(fMX_MAC_TIMING_MODE_INFO(thread, state);)\
	fHIDE(fMX_CHECK_OPERANDS_SETUP_ACC();)	/* Only Execute Instruction if both operands havee been registered */ \
	fHIDE(hmx_debug_log_mac_info(thread);) /*debug info for now */ \
	fMX_MULTIPLY(state, WEIGHTS_PER_BYTE_LOG, WGT_PER_WORD, UNPACK, TYPE, MULT_TYPE, OUTPUT_CHANNEL_SCALE);\
})

#define FORMAT_DM 0
#define FORMAT_SM 2

#define MULTI_BLOCK 0
#define SINGLE_BLOCK_ONLY 1

#define MX_ALIGNED 0
#define MX_ABOVE 1


#define MXMEM_ACT_INSN(TYPE, TYPE2, ELEMENT, EXTRA_ATTRIBS) \
MX_ACT(M8_mxmem_blk_sm_act_##TYPE,  "activation." TYPE2 "=mxmem(Rs32,Rt32)",              ELEMENT, FORMAT_SM, HMX_ACT_BLOCK,  EXTRA_ATTRIBS)\
MX_ACT(M8_mxmem_sm_act_##TYPE,      "activation." TYPE2 "=mxmem(Rs32,Rt32):deep",         ELEMENT, FORMAT_SM, HMX_ACT_DEEP,   EXTRA_ATTRIBS)\
MX_ACT(M8_mxmemu_blk_sm_act_##TYPE, "activation." TYPE2 "=mxmem(Rs32,Rt32):above",        ELEMENT, FORMAT_SM, HMX_ACT_ABOVE,  EXTRA_ATTRIBS)\
MX_ACT(M8_mxmems_blk_sm_act_##TYPE, "activation." TYPE2 "=mxmem(Rs32,Rt32):single",       ELEMENT, FORMAT_SM, HMX_ACT_SINGLE, EXTRA_ATTRIBS)\
MX_ACT(M8_mxmemd_blk_sm_act_##TYPE, "activation." TYPE2 "=mxmem(Rs32,Rt32):dilate",       ELEMENT, FORMAT_SM, HMX_ACT_DILATE, EXTRA_ATTRIBS)

MXMEM_ACT_INSN(ub, "ub", HMX_UB,   fMX_NONE)
MXMEM_ACT_INSN(hf, "hf", HMX_FP16, fMX_HMX_FLT)


// channel major doesn't fix nicely withe macro...
MX_ACT(M8_mxmem_blk_dm_act_ub,  "activation.ub=mxmem(Rs32,Rt32):cm",           HMX_UB, FORMAT_DM, HMX_ACT_BLOCK,  fMX_NONE)
MX_ACT(M8_mxmem_dm_act_ub,      "activation.ub=mxmem(Rs32,Rt32):deep:cm",      HMX_UB, FORMAT_DM, HMX_ACT_DEEP,   fMX_NONE)
MX_ACT(M8_mxmemu_blk_dm_act_ub, "activation.ub=mxmem(Rs32,Rt32):above:cm",     HMX_UB, FORMAT_DM, HMX_ACT_ABOVE,  fMX_NONE)
MX_ACT(M8_mxmems_blk_dm_act_ub, "activation.ub=mxmem(Rs32,Rt32):single:cm",    HMX_UB, FORMAT_DM, HMX_ACT_SINGLE, fMX_NONE)
MX_ACT(M8_mxmemd_blk_dm_act_ub, "activation.ub=mxmem(Rs32,Rt32):dilate:cm",    HMX_UB, FORMAT_DM, HMX_ACT_DILATE, fMX_NONE)


#define MXMEM_WGT_INSN(TYPE, TYPE2, TYPE3, SCALE, WGT_PER_WORD, UNPACK, ELEMENT,  MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS) \
MXMEM_WGT(M8_mxmem_wei_##TYPE,        "weight." TYPE2 "=mxmem(Rs32,Rt32)" TYPE3 ,          ELEMENT,  SCALE, WGT_PER_WORD, UNPACK, HMX_WEI_NORMAL, MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS) \
MXMEM_WGT(M8_mxmems_wei_##TYPE,       "weight." TYPE2 "=mxmem(Rs32,Rt32)" TYPE3 ":single", ELEMENT,  SCALE, WGT_PER_WORD, UNPACK, HMX_WEI_SINGLE, MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS) \
MXMEM_WGT(M8_mxmemdr_wei_##TYPE,      "weight." TYPE2 "=mxmem(Rs32,Rt32)" TYPE3 ":drop",   ELEMENT,  SCALE, WGT_PER_WORD, UNPACK, HMX_WEI_DROP,   MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS) \
MXMEM_WGT(M8_mxmemdp_wei_##TYPE,      "weight." TYPE2 "=mxmem(Rs32,Rt32)" TYPE3 ":deep",   ELEMENT,  SCALE, WGT_PER_WORD, UNPACK, HMX_WEI_DEEP,   MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS) \
MXMEM_WGT(M8_mxmema_wei_##TYPE,       "weight." TYPE2 "=mxmem(Rs32,Rt32)" TYPE3 ":after",  ELEMENT,  SCALE, WGT_PER_WORD, UNPACK, HMX_WEI_AFTER,  MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS) \
MXMEM_WGT(M8_mxmemdi_wei_##TYPE,      "weight." TYPE2 "=mxmem(Rs32,Rt32)" TYPE3 ":dilate", ELEMENT,  SCALE, WGT_PER_WORD, UNPACK, HMX_WEI_DILATE, MULT_TYPE,  OUTPUT_CHANNEL_SCALE, EXTRA_ATTRIBS)

#define OUTPUT_CHANNELS_1X 1
#define OUTPUT_CHANNELS_2X 2

MXMEM_WGT_INSN(b,   "b",,        0,  4, HMX_UNPACK_BYTE_FROM_BYTE,   HMX_B,     HMX_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(sm,  "sm",,       0,  4, HMX_UNPACK_SM_FROM_BYTE,     HMX_B,     HMX_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(n,   "n",,        1,  8, HMX_UNPACK_NIBBLE_FROM_BYTE, HMX_B,     HMX_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(c,   "c",,        2, 16, HMX_UNPACK_CRUMB_FROM_BYTE,  HMX_B,     HMX_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(sc,  "sc",,       2, 16, HMX_UNPACK_SCRUMB_FROM_BYTE, HMX_B,     HMX_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(b1,  "ubit",,     3, 32, HMX_UNPACK_1BIT_FROM_BYTE,   HMX_B,     HMX_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(sb1, "sbit",,     3, 32, HMX_UNPACK_1SBIT_FROM_BYTE,  HMX_B,     HMX_MULT_FXP,         OUTPUT_CHANNELS_1X, fMX_NONE)
MXMEM_WGT_INSN(n_2x, "n", ":2x", 1,  8, HMX_UNPACK_NIBBLE_FROM_BYTE, HMX_B,     HMX_MULT_FXP_SUBBYTE, OUTPUT_CHANNELS_2X, fMX_SUB_COLS)
MXMEM_WGT_INSN(hf,  "hf",,       0,  2, HMX_UNPACK_NONE,             HMX_FP16,  HMX_MULT_XFP,         OUTPUT_CHANNELS_1X, fMX_HMX_FLT)


///// CONVERTS //////

// Based on Rs32 from CVT transfer
#define SUBCHANNEL0 0
#define SUBCHANNEL1 2
#define POLY_CONVERT 0
#define LEGACY_CONVERT 1
#define BF16_BIT_UNUSED 0
#define XFP_RND_BIT_UNUSED 0
#define HMX_ACC_CLEAR 0
#define HMX_ACC_RETAIN 1

#define HMX_RELU 0
#define HMX_NO_RELU 1

#define MXMEM_CONVERT_LEGACY(TAG,OPCODE,TYPE,SAT,FORMAT_OFFSET,RSV,RTV,DIRECTION,CLEAR_ACC,EXTRA_ATTRIB) \
EXTINSN(TAG, OPCODE,  ATTRIBS(A_SHARED_EXTENSION,A_RESTRICT_SLOT0ONLY,A_HMX,A_HMX_CVT,A_MEMLIKE,A_HMX_BLOCK_ALIGN,A_STORE,A_VTCM_ALLBANK_ACCESS,A_EA_PAGECROSS),"Matrix Convert",  \
{   \
	fHIDE(fMX_GET_HMX_STATE(state);)\
	fHIDE(fMX_SET_PKTID(state, thread);)\
	fEA_REG(RSV);\
	fALIGN_CVT(EA, FORMAT_OFFSET);\
	fMX_CVT_WR_XLATE(EA, RSV, RTV, access_type_hmx_store);\
	fMX_CVT_TX_PARAMETERS(state, hmx_get_usr_reg_coproc_field(thread), TYPE, 0);\
	fHIDE(fMX_CVT_WR_PARAMETERS(state, RSV, RTV, TYPE, FORMAT_OFFSET, DIRECTION);)\
	fHIDE(fMX_CVT_TIMING_MODE_INFO(thread, state);)\
	fHIDE(hmx_cvt_rs_reg_t cvt_rs = {.raw = 0};)\
	fHIDE(cvt_rs.relu = SAT;)\
	fHIDE(cvt_rs.acc_clear = CLEAR_ACC;)\
	fHIDE(fMX_CVT(state, cvt_rs, TYPE, SUBCHANNEL0, LEGACY_CONVERT);)\
	fHIDE(EXTRA_ATTRIB();)\
})

#define MXCVT_RS(TAG,OPCODE,TYPE,RSV, SUBCHANNEL_SELECT,EXTRA_ATTRIB) \
EXTINSN(TAG, OPCODE,  ATTRIBS(A_SHARED_EXTENSION,A_RESTRICT_SLOT0ONLY,A_HMX,A_HMX_CVT,A_HMX_CU_SCALAR,A_MEMLIKE,A_NO_INTRINSIC),"Matrix Convert",  \
{   \
	fHIDE(fMX_GET_HMX_STATE(state);)\
	fHIDE(fMX_SET_PKTID(state, thread);)\
	fHIDE(hmx_cvt_rs_reg_t cvt_rs = {.raw = RSV};)\
	fMX_CVT_TX_PARAMETERS(state, hmx_get_usr_reg_coproc_field(thread), TYPE,  cvt_rs.fb_dst);\
	fHIDE(fMX_CVT_TIMING_MODE_INFO(thread, state);)\
	fHIDE(fMX_CVT(state, cvt_rs, TYPE, SUBCHANNEL_SELECT, POLY_CONVERT);)\
	fHIDE(EXTRA_ATTRIB();)\
})

#define MXST(TAG,OPCODE,FORMAT,TYPE,RSV,RTV,EXTRA_ATTRIB) \
EXTINSN(TAG, OPCODE,  ATTRIBS(A_SHARED_EXTENSION,A_RESTRICT_SLOT0ONLY,A_EA_REG_ONLY,A_HMX,A_MEMLIKE,A_VTCM_ALLBANK_ACCESS,A_EA_PAGECROSS,A_HMX_BLOCK_ALIGN,A_STORE),"Matrix Convert",  \
{   \
	fHIDE(fMX_GET_HMX_STATE(state);)\
	fHIDE(fMX_SET_PKTID(state, thread);)\
	fEA_REG(RSV);\
	fALIGN_CVT(EA, FORMAT);\
	fMX_CVT_WR_XLATE(EA, RSV, RTV, access_type_hmx_store);\
	fMX_CVT_WR_PARAMETERS(state, RSV, RTV, TYPE, FORMAT, HMX_CVT_BOTH);\
	fHIDE(fMX_CVT_TIMING_MODE_INFO(thread, state);)\
	fHIDE(EXTRA_ATTRIB();)\
}) 

#define MXMEMCVT_LEGACY(TAGL, TAGR, TAGTYPE, TAGPOS, FORMAT_TYPE, FORMAT, DTYPE, TYPE, ACC, POS,EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGL##_sat_##TAGTYPE,         "mxmem(Rs32,Rt32):before"        FORMAT_TYPE ":sat" DTYPE "=acc" ACC, TYPE, HMX_RELU,    FORMAT, RsV, RtV, HMX_CVT_BEFORE, HMX_ACC_CLEAR,  EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGL##_##TAGPOS##TAGTYPE,     "mxmem(Rs32,Rt32):before"        FORMAT_TYPE    POS DTYPE "=acc" ACC, TYPE, HMX_NO_RELU, FORMAT, RsV, RtV, HMX_CVT_BEFORE, HMX_ACC_CLEAR,  EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGL##_sat_##TAGTYPE##_r,     "mxmem(Rs32,Rt32):before:retain" FORMAT_TYPE ":sat" DTYPE "=acc" ACC, TYPE, HMX_RELU,    FORMAT, RsV, RtV, HMX_CVT_BEFORE, HMX_ACC_RETAIN, EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGL##_##TAGPOS##TAGTYPE##_r, "mxmem(Rs32,Rt32):before:retain" FORMAT_TYPE    POS DTYPE "=acc" ACC, TYPE, HMX_NO_RELU, FORMAT, RsV, RtV, HMX_CVT_BEFORE, HMX_ACC_RETAIN, EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGR##_sat_##TAGTYPE,         "mxmem(Rs32,Rt32):after"         FORMAT_TYPE ":sat" DTYPE "=acc" ACC, TYPE, HMX_RELU,    FORMAT, RsV, RtV, HMX_CVT_AFTER,  HMX_ACC_CLEAR,  EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGR##_##TAGPOS##TAGTYPE,     "mxmem(Rs32,Rt32):after"         FORMAT_TYPE   POS  DTYPE "=acc" ACC, TYPE, HMX_NO_RELU, FORMAT, RsV, RtV, HMX_CVT_AFTER,  HMX_ACC_CLEAR,  EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGR##_sat_##TAGTYPE##_r,     "mxmem(Rs32,Rt32):after:retain"  FORMAT_TYPE ":sat" DTYPE "=acc" ACC, TYPE, HMX_RELU,    FORMAT, RsV, RtV, HMX_CVT_AFTER,  HMX_ACC_RETAIN, EXTRA_ATTRIB)\
MXMEM_CONVERT_LEGACY(M8_mxcvt##TAGR##_##TAGPOS##TAGTYPE##_r, "mxmem(Rs32,Rt32):after:retain"  FORMAT_TYPE    POS DTYPE "=acc" ACC, TYPE, HMX_NO_RELU, FORMAT, RsV, RtV, HMX_CVT_AFTER,  HMX_ACC_RETAIN, EXTRA_ATTRIB)

MXMEMCVT_LEGACY(l_dm, r_dm, ub,           , ":cm", FORMAT_DM, ".ub", HMX_UB,    "",     "",     fMX_NONE)
MXMEMCVT_LEGACY(l,    r,    ub,           ,    "", FORMAT_SM, ".ub", HMX_UB,    "",     "",     fMX_NONE)
MXMEMCVT_LEGACY(b,    a,    uh,           ,    "", FORMAT_SM, ".uh", HMX_UH,    ":2x1", "",     fMX_NONE)
MXMEMCVT_LEGACY(b,    a,    uh2x2,        ,    "", FORMAT_SM, ".uh", HMX_UH_UH, ":2x2", "",     fMX_HIDEHTML)
//MXMEMCVT_LEGACY(l,    r,    hf,   sat_pos_,    "", FORMAT_SM, ".hf", HMX_FP16,  "",     ":pos", fMX_HMX_FLT)

MXMEM_CONVERT_LEGACY(M8_mxcvtl_sat_hf,       "mxmem(Rs32,Rt32):before.hf=acc",            HMX_FP16, HMX_NO_RELU, FORMAT_SM, RsV, RtV, HMX_CVT_BEFORE, HMX_ACC_CLEAR,  fMX_HMX_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtl_sat_pos_hf,   "mxmem(Rs32,Rt32):before:pos.hf=acc",        HMX_FP16, HMX_RELU,    FORMAT_SM, RsV, RtV, HMX_CVT_BEFORE, HMX_ACC_CLEAR,  fMX_HMX_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtl_sat_hf_r,     "mxmem(Rs32,Rt32):before:retain.hf=acc",     HMX_FP16, HMX_NO_RELU, FORMAT_SM, RsV, RtV, HMX_CVT_BEFORE, HMX_ACC_RETAIN, fMX_HMX_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtl_sat_pos_hf_r, "mxmem(Rs32,Rt32):before:retain:pos.hf=acc", HMX_FP16, HMX_RELU,    FORMAT_SM, RsV, RtV, HMX_CVT_BEFORE, HMX_ACC_RETAIN, fMX_HMX_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtr_sat_hf,       "mxmem(Rs32,Rt32):after.hf=acc",             HMX_FP16, HMX_NO_RELU, FORMAT_SM, RsV, RtV, HMX_CVT_AFTER,  HMX_ACC_CLEAR,  fMX_HMX_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtr_sat_pos_hf,   "mxmem(Rs32,Rt32):after:pos.hf=acc",         HMX_FP16, HMX_RELU,    FORMAT_SM, RsV, RtV, HMX_CVT_AFTER,  HMX_ACC_CLEAR,  fMX_HMX_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtr_sat_hf_r,     "mxmem(Rs32,Rt32):after:retain.hf=acc",      HMX_FP16, HMX_NO_RELU, FORMAT_SM, RsV, RtV, HMX_CVT_AFTER,  HMX_ACC_RETAIN, fMX_HMX_FLT)
MXMEM_CONVERT_LEGACY(M8_mxcvtr_sat_pos_hf_r, "mxmem(Rs32,Rt32):after:retain:pos.hf=acc",  HMX_FP16, HMX_RELU,    FORMAT_SM, RsV, RtV, HMX_CVT_AFTER,  HMX_ACC_RETAIN, fMX_HMX_FLT)

MXCVT_RS(M8_cvt_rs_ub,     "cvt.ub=acc(Rs32)",     HMX_UB,      RsV, SUBCHANNEL0, fMX_NONE)
MXCVT_RS(M8_cvt_rs_ub_sc0, "cvt.ub=acc(Rs32):sc0", HMX_UB4,     RsV, SUBCHANNEL0, fMX_SUB_COLS)
MXCVT_RS(M8_cvt_rs_ub_sc1, "cvt.ub=acc(Rs32):sc1", HMX_UB4,     RsV, SUBCHANNEL1, fMX_SUB_COLS)
MXCVT_RS(M8_cvt_rs_uh_2x1, "cvt.uh=acc(Rs32):2x1", HMX_UH,      RsV, SUBCHANNEL0, fMX_NONE)
MXCVT_RS(M8_cvt_rs_uh_2x2, "cvt.uh=acc(Rs32):2x2", HMX_UH_UH,   RsV, SUBCHANNEL0, fMX_NONE)
MXCVT_RS(M8_cvt_rs_hf,     "cvt.hf=acc(Rs32)",     HMX_FP16,    RsV, SUBCHANNEL0, fMX_HMX_FLT)

MXST(M8_mxmem,     "mxmem(Rs32,Rt32)=cvt",     FORMAT_SM, HMX_UB,    RsV, RtV, fMX_NONE)
MXST(M8_mxmem_cm,  "mxmem(Rs32,Rt32):cm=cvt",  FORMAT_DM, HMX_UB,    RsV, RtV, fMX_NONE)
MXST(M8_mxmem_2x2, "mxmem(Rs32,Rt32):2x2=cvt", FORMAT_SM, HMX_UH_UH, RsV, RtV, fMX_HIDEHTML)


/// MISC INSNS ////


EXTINSN(M8_mxmem_bias,  "bias=mxmem(Rs32)",  ATTRIBS(A_SHARED_EXTENSION,A_MEMLIKE,A_LOAD,A_HMX,A_RESTRICT_NOSLOT1_STORE,A_RESTRICT_SLOT0ONLY), "Matrix Bias and Scale", 
{
	fHIDE(int output_depth = thread->processor_ptr->arch_proc_options->hmx_output_depth;)
	fEA_REG(RsV);
	fHIDE(hmx_bias_init(thread, insn->slot, EA, access_type_hmx_load_bias, thread->processor_ptr->arch_proc_options->hmx_output_depth*4);)
	fALIGN_FXP_DEPTH(EA,1);
	fHIDE(if (EXCEPTION_DETECTED) return;)
	for(int output_idx = 0; output_idx < output_depth; output_idx++) {
		fMX_LOAD_BIAS_LO(output_idx, EA, thread->mem_access[insn->slot].paddr);
	}
	fHIDE(THREAD2HMXSTRUCT->fxp_commit_state.bias_update=1;)
})
EXTINSN(M8_mxmem_st_bias,    "mxmem(Rs32)=bias", ATTRIBS(A_SHARED_EXTENSION,A_MEMLIKE,A_STORE,A_RESTRICT_NOSLOT1_STORE,A_RESTRICT_SLOT0ONLY,A_HMX), "Store Matrix Bias and Scale", \
{
	fHIDE(int output_depth = thread->processor_ptr->arch_proc_options->hmx_output_depth;)
	fEA_REG(RsV);
	fHIDE(hmx_bias_init(thread, insn->slot, EA, access_type_hmx_store_bias, thread->processor_ptr->arch_proc_options->hmx_output_depth*4);)	
	fALIGN_FXP_DEPTH(EA,1);
	fHIDE(if (EXCEPTION_DETECTED) return;)
	for(int output_idx = 0; output_idx < output_depth; output_idx++) {
		fMX_STORE_BIAS(output_idx, EA);
	}
	fHIDE(THREAD2HMXSTRUCT->fxp_commit_state.bias_write = 1;)
})

EXTINSN(M8_mxmem2_bias,  "bias=mxmem2(Rs32)",  ATTRIBS(A_SHARED_EXTENSION,A_VTCM_ALLBANK_ACCESS,A_MEMLIKE,A_LOAD,A_HMX,A_RESTRICT_NOSLOT1_STORE,A_RESTRICT_SLOT0ONLY), "Matrix Bias and Scale", 
{
	fHIDE(int output_depth = thread->processor_ptr->arch_proc_options->hmx_output_depth;)
	fEA_REG(RsV);
	fHIDE(hmx_bias_init(thread, insn->slot, EA, access_type_hmx_load_bias, thread->processor_ptr->arch_proc_options->hmx_output_depth*8);)
	fALIGN_FXP_DEPTH(EA,2);
	fHIDE(if (EXCEPTION_DETECTED) return;)
	for(int output_idx = 0; output_idx < output_depth; output_idx++) {
		fMX_LOAD_BIAS_LO(output_idx, EA, thread->mem_access[insn->slot].paddr);
		fMX_LOAD_BIAS_HI(output_idx, EA, thread->mem_access[insn->slot].paddr);
	}
	fHIDE(THREAD2HMXSTRUCT->fxp_commit_state.bias_update=1;)
})
EXTINSN(M8_mxmem2_st_bias,    "mxmem2(Rs32)=bias", ATTRIBS(A_SHARED_EXTENSION,A_VTCM_ALLBANK_ACCESS,A_MEMLIKE,A_STORE,A_RESTRICT_NOSLOT1_STORE,A_RESTRICT_SLOT0ONLY,A_HMX), "Store Matrix Bias and Scale", \
{
	fHIDE(int output_depth = thread->processor_ptr->arch_proc_options->hmx_output_depth;)
	fEA_REG(RsV);
	fHIDE(hmx_bias_init(thread, insn->slot, EA, access_type_hmx_store_bias, thread->processor_ptr->arch_proc_options->hmx_output_depth*8);)	
	fALIGN_FXP_DEPTH(EA,2);
	fHIDE(if (EXCEPTION_DETECTED) return;)
	for(int output_idx = 0; output_idx < output_depth; output_idx++) {
		fMX_STORE_BIAS_DOUBLE(output_idx, EA);
	}
	fHIDE(THREAD2HMXSTRUCT->fxp_commit_state.bias_write = 2;)
})



EXTINSN(M8_mxclracc,    "mxclracc",     ATTRIBS(A_SHARED_EXTENSION,A_HMX,A_MEMLIKE_PACKET_RULES,A_RESTRICT_SLOT0ONLY), "Clear both fxp accumulators", {	fMX_CLEAR_BOTH_ACC_FXP(); })
EXTINSN(M8_mxclracc_hf, "mxclracc.hf",  ATTRIBS(A_SHARED_EXTENSION,A_HMX,A_HMX_FLT,A_MEMLIKE_PACKET_RULES,A_RESTRICT_SLOT0ONLY), "Clear both flt accumulators", {	fMX_CLEAR_BOTH_ACC_FLT(); })
EXTINSN(M8_mxswap,      "mxswapacc",    ATTRIBS(A_SHARED_EXTENSION,A_HMX,A_MEMLIKE_PACKET_RULES,A_RESTRICT_SLOT0ONLY), "Swap fxp accumulators", {	fMX_SWAP_ACC_FXP(); })
EXTINSN(M8_mxswap_hf,   "mxswapacc.hf", ATTRIBS(A_SHARED_EXTENSION,A_HMX,A_HMX_FLT,A_MEMLIKE_PACKET_RULES,A_RESTRICT_SLOT0ONLY), "Swap flt accumulators", {	fMX_SWAP_ACC_FLT(); })


EXTINSN(M8_mxaccshl,    "acc=mxshl(acc,#16)",     ATTRIBS(A_SHARED_EXTENSION,A_HMX,A_MEMLIKE_PACKET_RULES,A_RESTRICT_SLOT0ONLY,A_NOTE_NOLAHAINAV1), "Left shift accumulator", 
{
	fHIDE(memcpy(THREAD2HMXSTRUCT->future_accum_fxp, THREAD2HMXSTRUCT->accum_fxp, sizeof(hmx_acc_t)*MAX_ACCUMULATORS_DEPTH*MAX_ACCUMULATORS_SPATIAL);)
	fHIDE(int current_acc = THREAD2HMXSTRUCT->current_acc_fxp;)
	fHIDE(int spatial_size = 1<<thread->processor_ptr->arch_proc_options->hmx_spatial_size;)
	fHIDE(int output_depth = thread->processor_ptr->arch_proc_options->hmx_output_depth;)
	for(int spatial_idx = 0; spatial_idx < spatial_size; spatial_idx++) { 
		for(int output_idx = 0; output_idx < output_depth; output_idx++) { 
			fMX_SHL16_ACCUMULATOR_FXP(spatial_idx, output_idx, current_acc);
			fHIDE(THREAD2HMXSTRUCT->future_accum_fxp[spatial_idx][output_idx].bias_state &= ~(5 << current_acc); )
		}
	}
	fHIDE(THREAD2HMXSTRUCT->fxp_commit_state.acc_update = 1;)		
	
})


// DEBUG PRINTS, VECX attribute for now, probably doesn't need any attribute
EXTINSN(M8_pv64d, "pmxd", ATTRIBS(A_SHARED_EXTENSION,A_HMX,A_VDBG,A_FAKEINSN,A_MEMLIKE), "Matrix Accumulator Print", { hmx_debug_print_acc(thread, !HMX_HEX,  0); })
EXTINSN(M8_pv64,  "pmx",  ATTRIBS(A_SHARED_EXTENSION,A_HMX,A_VDBG,A_FAKEINSN,A_MEMLIKE), "Matrix Accumulator Print", { hmx_debug_print_acc(thread,  HMX_HEX,  0); })
EXTINSN(M8_pv64dfp, "pmxfpd", ATTRIBS(A_SHARED_EXTENSION,A_HMX,A_VDBG,A_FAKEINSN,A_MEMLIKE), "Matrix Accumulator Print", { hmx_debug_print_acc(thread, !HMX_HEX,  1); })
EXTINSN(M8_pv64fp,  "pmxfp",  ATTRIBS(A_SHARED_EXTENSION,A_HMX,A_VDBG,A_FAKEINSN,A_MEMLIKE), "Matrix Accumulator Print", { hmx_debug_print_acc(thread,  HMX_HEX,  1); })

#ifdef __SELF_DEF_EXTINSN
#undef EXTINSN
#undef __SELF_DEF_EXTINSN
#endif
